extends ../../../common/templates/layout/base

include ../../templates/mixins/docsnav

block intro
	.page-header
		.container
			h1 配置
			p.lead 如何让KeystoneJS按你想要的方式工作

block content
	.container: .row
		
		.col-sm-3
			+docsnav(docssection)
		
		.col-sm-9: .docs-content
			
			h2 Keystone参数
			
			a(name='options-concepts')
			h3 设定参数
			
			p KeystoneJS的参数可以设定它的很多行为，从如何配置express程序到启用某些功能和集成服务的认证参数。
			
			p 参数有3种设定办法：
			
			ul.options
				li 给<code>keystone.init(options)</code>方法传一个<code>{ key: 'value' }</code> 配置 <code class="data-type">Object</code>
				li 调用<code>keystone.set('key', 'value')</code>
				li 在<code>process.env</code>中设置环境变量。仅有部分参数支持这种方式（注意下文的提示）。
	
			p 如果你不想把秘钥和配置放在代码库中(这对于开源项目，或者不是所有开发人员都可以访问生产配置设定的项目来说非常重要) ，用<a href="https://npmjs.org/package/dotenv" target="_blank">dotenv</a>模块很容易实现。
			
			a(name='options-project')
			h3 项目参数
			
			p 下面这些参数控制着品牌塑造、导航和KeystoneJS程序在管理界面中的默认输出设定：
			
			table.table
				col(width=210)
				col
				tr
					td <code>name</code> <code class="data-type">String</code>
					td 
						p KeystoneJS程序的名称
						p.note 如果没有设定<code>mongo</code>参数，Keystone会用<code>name</code>作为数据库名。
				tr
					td <code>brand</code> <code class="data-type">String</code>
					td 在管理界面的左上角显示
				tr
					td <code>module root</code> <code class="data-type">String</code>
					td
						p 设置 Keystone 应用所在根路径。<code>module root</code> 默认指向应用内第一次引用 Keystone script 所在目录。默认设置有时候不满足需求。
						p <code>module root</code> 允许自定义指定应用内根路径。重写默认 <code>module root</code> 有时很有用，例如，对你的应用进行单元测试。
						p <code>module root</code> 通过 Keystone 的 <code>.getPath()</code> 方法来解析和扩展 <code>views</code>， <code>favicon</code>， <code>extensions</code>， <code>ssl cert</code>， <code>ssl key</code>， <code>ssl ca</code>， <code>emails</code> 和 <code>updates</code> 的路径设置。
						p <code>module root</code> 可以被设置为相对路径或者绝对路径。
						p.note 如果使用相对路径，相对路径会根据设置 script 所在路径决定。
				tr
					td <code>frame guard</code> <code class="data-type">String/Boolean</code>
					td
						p 这个设置告诉 Keystone 如何处理 <code>iframe</code> 标签。 它通过设置响应报头 <code>X-Frame-Options</code> 完成。 这个请求报头用来防止 "ClickJacking" 攻击。
						p 默认设置是 <code>sameorigin</code>。
						p 以下是有效参数。
						ul
							li <code class="default-value">"sameorigin"</code> 允许来自同一服务器的 <code>iframe</code> 标签请求
							li <code class="default-value">"deny"</code> 拒绝所有来自 <code>iframe</code> 标签的请求
							li <code class="default-value">true</code> (与 <code class="default-value">"deny"</code> 相同)
							li <code class="default-value">false</code> 禁用 <code>frame guard</code>
				tr
					td <code>nav</code> <code class="data-type">Object</code>
					td
						p 指定管理界面导航结构的对象。给每个应该在主导航中可见的部分创建一个键。每个键的值都可以是单个列表路径（查看列表时在URL中见到的部分）或一个列表路径数组。使用数组时，会在管理界面中渲染二级导航。
						p nav还用来生成管理界面首页上的链接；所有已注册但不包含在<code>nav</code>中的列表都会出现在屏幕底部的'Other'分组下。
				tr
					td <code>csv field delimiter</code> <code class="data-type">String</code>
					td 允许你选一个定制的域分隔符用在导出的CSV中，代替默认的逗号。
				tr
					td <code>app</code> <code class="data-type">Object</code>
					td 用来代替默认的Express实例。
				tr
					td <code>mongoose</code> <code class="data-type">Object</code>
					td 用来代替默认的mongoose实例。
			p.note <code>app</code> 和 <code>mongoose</code> 参数用来替换已过期的 <code>keystone.connect()</code> 方法。由于升级至Express 4, `keystone.connect()` 不再按预期那样工作。

			.code-header
				h4 定制导航的例子
				p 如果你有<code>User</code>、<code>Post</code>和<code>PostCategory</code>三个模型，可以像下面这样将posts和post-categories分组到<strong>Content</strong>导航条目中：
			pre: code.language-javascript
				| keystone.set('nav', {
				|     'users': 'users',
				|     'content': ['posts', 'post-categories']
				| });
		
			a(name='options-server')
			h3 Web服务器参数
			
			p 下面这些参数控制着web服务器和express程序的配置：
			
			table.table
				col(width=210)
				col
				tr
					td <code>env</code> <code class="data-type">String</code>
					td
						p 要用的环境设定。支持<strong>development</strong>和<strong>production</strong>，这个参数会影响缓存已编译模板之类的事情。默认为<code class="default-value">process.env.NODE_ENV || "development"</code>。
						p 你真的应该用环境变量<code>NODE_ENV</code><strong>在生产服务器上将这个设为<code class="default-value">production</code></strong>。还有几个模块也遵循这个约定。
				tr
					td <code>port</code> <code class="data-type">Number</code>
					td
						p 监听请求的端口。默认为<code class="default-value">process.env.PORT || 3000</code>
				tr
					td <code>host</code> <code class="data-type">String</code>
					td
						p 监听请求的ip地址。默认为<code class="default-value">process.env.IP || '127.0.0.1'</code>
						p 必须设定了<code>port</code>(通过参数或环境变量) <code>host</code>参数才能生效。
				tr
					td <code>views</code> <code class="data-type">String</code>
					td
						p 放程序<strong>视图模板</strong>的路径。使用<code>keystone.View</code>类需要这个，并且也会在express app上设定。
						p 如果你遵循<a href="/zh/guide#start_structure">推荐的项目结构</a>，这个应该设为<code class="default-value">"/templates/views"</code>。
				tr
					td <code>view engine</code> <code class="data-type">String</code>
					td
						p 默认使用的模板引擎。express支持的任何引擎应该都可以。Keystone中包含<strong>Jade</strong>，但用其它引擎都必须添加到<code>package.json</code>里的项目依赖项部分。
						p 这个参数是设定在express app 上的(<a href="http://expressjs.com/api.html#app.engine" target="_blank">参见相关文档</a>)。
				tr
					td <code>custom engine</code> <code class="data-type">Function</code>
					td
						p 如果你要用定制的模板引擎，要将这个参数设为用来处理模板的函数。
						p 参见下面的例子，了解如何使用<a href="http://paularmstrong.github.io/swig/" target="_blank">Swig</a> 模板引擎。
				tr
					td <code>view cache</code> <code class="data-type">Boolean</code>
					td
						p 这个参数是传给Express的，用来控制是否在请求间缓存编译的视图模板。
						p 在生产环境中默认是<code class="default-value">true</code>，否则是<code class="default-value">false</code>，所以几乎不用特意设定它。
				tr
					td <code>language options</code> <code class="data-type">Object</code>
					td
						p 可选的<code>language options</code>对象包含了语言支持偏好。默认为所有默认值，并仅支持<code>en-US</code>。

				tr
					td <code>laungage options: supported languages</code> <code class="data-type">Array</code>
					td
						p 已支持语言的列表。首先是偏好的语言。语言标签必须符合BCP47标准：
						p <code>language[-script][-region]</code>
						ol
							li 语言子标签 (比如 <code>en</code>, <code>zh</code>).
							li 变体子标签 (可选, 比如 <code>Hant</code>, <code>Latn</code>).
							li 地区子标签 (可选, 比如 <code>US</code>, <code>CN</code>).
						p 例子: <code>en</code>, <code>en-US</code> 和 <code>zh-Hant-TW</code>.
						p 默认为 <code>['en-US']</code>.

				tr
					td <code>language options: language cookie</code> <code class="data-type">String</code>
					td
						p 语言cookie的名称。它会保存用户会话的当前语言标签，直到<code>maxAge</code>超期，或直到被浏览器的URL覆盖掉。 
						p 默认为<code>'language'</code>.

				tr
					td <code>language options: language cookie options</code> <code class="data-type">Object</code>
					td
						p 可选。语言cookie的参数。这会传给express。参见<a href="http://expressjs.com/en/4x/api.html#res.cookie">Express cookie 参数</a>了解详情。

				tr
					td <code>language options: language select url</code> <code class="data-type">String</code>
					td
						p 一个可选的URL，可以用来改变语言偏好。如果发送了referrer头，它会重定向会原来的URL中，如果没有指定referrer，默认重定向到<code>/</code>。
						p <b>用法：</b>
						p <code>/languages/{language}</code>
						p 比如说，访问<code>/languages/en-US</code> 会将你的语言偏好设为<code>'en-US'</code>。
						p 默认为<code>'/language/{language}'</code>。

				tr
					td <code>language options: language query name</code> <code class="data-type">String</code>
					td
						p 或者，你也可以用查询字符串在任一页面上设定语言，而无需转到其它URL。用这个参数可以设定查询参数的名称，由它来触发语言设定。默认值为<code>'language'</code>。
						p 比如说，如果将language query name 设为 <code>'locale'</code>，添加 <code>?locale=zh-CN</code> 到任一URL路径上都将会把语言设为<code>'zh-CN'</code>。使用特殊的语言值<code>'default'</code>可以重置语言偏好，重用默认的设置，就像你是第一次访问一样。

				tr
					td <code>language options: disable</code> <code class="data-type">Boolean</code>
					td
						p 禁用语言中间件。默认为<code>false</code>。

				tr
					td <code>locals</code> <code class="data-type">Object</code>
					td
						p 传给视图模板的默认local变量。
						p 路由可以通过修改<code>res.locals</code>扩展或修改local变量。
				tr
					td <code>static</code> <code class="data-type">String</code> 或 <code class="data-type">Array</code>
					td
						p 指向程序静态文件的一或多个路径。设定这个会引入<code>express.static</code> 中间件。
						p 如果你遵循<a href="/zh/guide#start_structure">推荐的项目结构</a>，这个应该设为<code class="default-value">'public'</code>。
				tr
					td <code>static options</code> <code class="data-type">Object</code>
					td
						p 可选的配置参数，将会传给<code>express.static</code>中间件。
				tr
					td <code>less</code> <code class="data-type">String</code> 或 <code class="data-type">Array</code>
					td
						p 如果你想让Keystone将<strong>.less</strong>文件自动编译成<strong>.css</strong>文件，把它的值也设成<code>static</code>参数指定的路径。
						p 设了这个参数之后，所有对<strong>.css</strong>或<strong>.min.css</strong>文件的请求处理都会先检查有没有同名的<strong>.less</strong>文件，如果有，则生成css文件。
				tr
					td <code>less options</code> <code class="data-type">Object</code>
					td
						p 可选的配置参数，会传给<code>less</code> 中间件；参见<a href="https://github.com/emberfeather/less.js-middleware" target="_blank">github.com/emberfeather/less.js-middleware</a>了解详情。
				tr
					td <code>sass</code> <code class="data-type">String</code> 或 <code class="data-type">Array</code>
					td
						p 如果你想让Keystone将<strong>.sass</strong>文件自动编译成<strong>.css</strong>文件，把它的值也设成<code>static</code>参数指定的路径。
						p 设了这个参数之后，所有对<strong>.css</strong>或<strong>.min.css</strong>文件的请求处理都会先检查有没有同名的<strong>.sass</strong>文件，如果有，则生成css文件。
						p.note 注意，启用这个参数需要在<code>package.json</code>文件中添加<a href="https://github.com/sass/node-sass" target="_blank"><code>node-sass</code></a>包作为依赖项；Keystone不会自动引入它。
				tr
					td <code>sass options</code> <code class="data-type">Object</code>
					td
						p 可选的配置参数，会传给<code>sass</code> 中间件；参见<a href="https://github.com/sass/node-sass#options" target="_blank">github.com/sass/node-sass</a>了解详情。
				tr
					td <code>favicon</code> <code class="data-type">String</code>
					td
						p 程序的<strong>favicon</strong>的路径。设定这个会引入<code>express.favicon</code>中间件。应该是相对项目根路径的路径。
						p 如果你遵循<a href="/zh/guide#start_structure">推荐的项目结构</a>，这个应该设为<code class="default-value">"/public/favicon.ico"</code>。
				tr
					td <code>compress</code> <code class="data-type">Boolean</code>
					td 将这个参数设为<code class="default-value">true</code>以启用HTTP压缩。这会引入<code>express.compress</code>中间件(<a href="http://expressjs.com/api.html#compress" target="_blank">相关文档</a>).
				tr
					td <code>logger</code> <code class="data-type">String</code>
					td 设定该参数以引入<code>morgan</code>中间件。该参数的值会传给<code>morgan</code>做初始化(<a href="https://github.com/expressjs/morgan" target="_blank">相关文档</a>)。将该参数值设为<code class="default-value">false</code> 会禁用日志。默认为<code class="default-value">:method :url :status :response-time ms</code>。
				tr
					td <code>logger options</code> <code class="data-type">Object</code>
					td
						p 可选的配置参数，将会传给<code>morgan</code>中间件。参见<a href="https://github.com/expressjs/morgan" target="_blank">github.com/expressjs/morgan</a> 了解详情。
				tr
					td <code>trust proxy</code> <code class="data-type">Boolean</code>
					td 设定这个启用HTTP请求头<code>X-Forwarded-For</code>。提取出来的IP地址会放在数组<code>req.ips</code> (<a href="http://expressjs.com/api.html#req.ips">相关文档</a>)。
				tr
					td <code>file limit</code> <code class="data-type">Number</code>
					td 为Express body parser添加文件限制。
				tr
					td <code>allowed ip ranges</code> <code class="data-type">String</code>
					td 逗号(,)分隔的IP范围字符串，遵循CIDR格式。 <br />
						| <code class="default-value">::ffff:0/64, 127.0.0.0/8, 192.168.0.0/16</code> <br />  
						| 所有非有效范围内IP发起的请求都会得到503响应。
			
			
			.code-header
				h4 备选的视图引擎
				p Keystone默认使用<strong>Jade</strong>模板引擎处理视图。这里有个设置其它引擎<strong>Swig</strong>的例子。
			pre: code.language-javascript
				| var swig = require('swig');
				| keystone.set('view engine', 'swig');
				| keystone.set('custom engine', swig.renderFile);
			
			.code-header
				h4 输出 <code >onHttpServerCreated</code> 事件
			pre: code.language-javascript
				| keystone.start({
				|     onHttpServerCreated: function() {
				|       var server = keystone.httpServer;
				|     }
				| });
					
			a(name='options-ssl')
			h3 HTTPS Web服务器参数
			
			p KeystoneJS程序实现HTTPS主要有两种方式：或者使用一个web服务器 (比如 <a href="http://nginx.com" target="_blank">NGINX</a>)或PAAS (e.g. <a href="https://www.heroku.com" target="_blank">Heroku</a>)实现，或者用<a href="http://nodejs.org/api/https.html" target="_blank">node.js提供的https服务器</a>设定下面的参数。
			
			table.table
				col(width=210)
				col
				tr
					td <code>ssl</code> <code class="data-type">Boolean</code> 或 <code class="data-type">String</code>
					td
						p 是否启动SSL服务器。默认为<code class="default-value">false</code>。
						p 设为<code class="default-value">true</code>时，会启动http和https服务器。如果<code>ssl key</code> 或<code>ssl cert</code>无效，只启动http服务器。
						p 设为<code class="default-value">"only"</code>时，只启动https服务器。如果<code>ssl key</code> 或 <code>ssl cert</code>无效，则KeystoneJS不会启动。
				tr
					td <code>ssl key</code> <code class="data-type">Path</code>
					td
						p 指向SSL秘钥的路径。应该为绝对或相对于<code class="default-value">process.cwd()</code>的路径 (通常是项目的根路径)。
				tr
					td <code>ssl cert</code> <code class="data-type">Path</code>
					td
						p 指向SSL证书的路径。应该为绝对或相对于<code class="default-value">process.cwd()</code>的路径 (通常是项目的根路径)。
				tr
					td <code>ssl ca</code> <code class="data-type">Path</code>
					td
						p 应该为绝对或相对于<code class="default-value">process.cwd()</code>的路径 (通常是项目的根路径)。
				
				tr
					td <code>ssl port</code> <code class="data-type">Number</code>
					td
						p 启动SSL服务器的端口。默认为<code class="default-value">3001</code>。
				tr
					td <code>ssl host</code> <code class="data-type">String</code>
					td
						p 监听请求的ip地址。默认为<code class="default-value">process.env.SSL_IP</code>或<code>host</code> 参数的值。
			
				tr
					td(colspan="2"): p 在<code class="language-javascript">keystone.start()</code>期间输出<code class="">onHttpsServerCreated</code>事件。
				
			p.note <strong>警告：</strong> 如果你计划在 KeystoneJS 应用中启用 SSL，确保使用中的 Node.js 版本为 <code class="default-value">0.10.33</code> 或者更高。 低于<code class="default-value">0.10.33</code> 版本的 Node 容易引发 POODLE (Padding Oracle On Downgraded Legacy Encryption) 漏洞，一种“中间人”攻击目标 <code class="default-value">SSLv3</code> (see <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3566">CVE-2014-3566</a>)。<code class="default-value">0.10.33</code>版本的 Node，<code class="default-value">SSLv2</code>和 <code class="default-value">SSLv3</code> 协议默认关闭。更多信息参见 <a href="http://blog.nodejs.org/2014/10/23/node-v0-10-33-stable/">Node v0.10.33 (Stable)</a> 的release notes。
					
			a(name='options-unix-socket')
			h3 Unix Socket Web 服务器参数
			
			p Express会监听一个unix socket的连接。   
			
			table.table
				col(width=210)
				col
				tr
					td <code>unix socket</code> <code class="data-type">String</code>
					td
						p 指向可写unix socket的路径。应该是绝对路径或相对于<code class="default-value">process.cwd()</code> （一般是项目的根路径）的路径. 如果文件之前已经存在了，会先被移除。
						p 当设定 http 和 https 服务器时会被忽略。
						
				tr
					td(colspan="2"): p 在<code class="language-javascript">keystone.start()</code>期间输出<code class="">onHttpsServerCreated</code>事件。
						
			
			a(name='options-database')
			h3 数据库和用户认证参数
			
			p 下面这些参数控制着数据库配置和用户模型 / 认证：
			
			table.table
				col(width=210)
				col
				tr
					td <code>mongo</code> <code class="data-type">String</code>
					td
						p MongoDB连接的url。
						p 一般应该设为<code class="default-value">process.env.MONGO_URI || "mongodb://localhost/your-db"</code>
				tr
					td <code>model prefix</code> <code class="data-type">String</code>
					td
						p 应用到模型所用的所有mongodb集合的前缀。
				tr
					td <code>auth</code> <code class="data-type">Mixed</code>
					td
						p 是否为Keyston的管理界面启用内置的认证，或者用定制的函数认证用户。
						p 当这个设为<code class="default-value">false</code> (或未定义)时，Keystone的管理界面会向公众开放(所以一定要设定它！)
						p 如果使用定制函数，应该遵循express中间件<code>function(req, res, next)</code>的标准。如果用户没有登录或不应该访问Keystone的管理界面，使用<code>res.redirect()</code>转发 - 否则调用 <code>next</code>回调启用访问。
				tr
					td <code>user model</code> <code class="data-type">String</code>
					td
						p 用户的Keystone列表的键，如果<code>auth</code>设为<code class="default-value">true</code>，则是<strong>必需的</strong>。
						p 一般这个会设为<code class="default-value">User</code>。
				tr
					td <code>cookie secret</code> <code class="data-type">String</code>
					td
						p cookies的加密密钥。传给Express的cookie解析器。
						p 最好将这个设为一个长长的随机字符串。
				tr
					td <code>session store</code> <code class="data-type">String</code>
					td
						p 将这个设为<code class="default-value">mongo</code>用MongoDB数据库存储会话数据。
						p 默认情况下，Keystone会用Express提供的内存会话存储，这个只应该在开发时用，因为它不能扩展，只能支持单进程，时间长了还会出现内存泄露。
						p 有效的参数是：
						ul
							li <code class="default-value">mongo</code> (或<code class="default-value">connect-mongo</code>)
							li <code class="default-value">connect-mongostore</code> (支持复制集，但需要显式地配置 - 见下文)
							li <code class="default-value">connect-redis</code>
						p.note Keystone没有捆绑会话存储包，所以一定要将选定的会话存储添加到项目的<code>package.json</code>中。
						p.note 可以通过<code class="language-javascript">keystone.get('express session')</code>获取传给Express的会话配置。
				tr
					td <code>session store options</code> <code class="data-type">Object</code>
					td
						p 用这个参数可以覆盖默认的会话存储配置，并且会传给会话存储包。
						p 使用<code class="default-value">connect-mongostore</code>存储时需要设定这个。
						
						.code-header
							h4 connect-mongostore的例子
						pre: code.language-javascript
							| "sessionStore": {
							|   "db": {
							|     "name": "myDb",
							|     "servers": [
							|       { "host": "192.168.1.100", "port": 28001 },
							|       { "host": "192.168.1.100", "port": 28002 },
							|       { "host": "192.168.1.101", "port": 27017 }
							|     ]
							|   }
							| }
							
						.code-header
							h4 connect-redis的例子
						pre: code.language-javascript
							| "sessionStore": {
							|   "host": "", // Redis服务器主机名
							|   "port": "", // Redis服务器端口
							|   "ttl": "", // 以秒为单位的Redis会话TTL
							|   "db": "", // 所用的数据库索引
							|   "pass": "", // 用于Redis认证的密码
							|   "prefix": "", // Key前缀默认为"sess:"
							|   "url": "", // 比如 redis://user:pass@host:port/db
							| }
						p.note 可以通过<code class="language-javascript">keystone.get('session options')</code>获取到会话参数。
				tr
					td <code>back url</code> <code class="data-type">String</code>
					td
						p 管理界面中用在'回到(网站名)'链接中的<code>href</code>
						p 默认为<code class="default-value">/</code>
				tr
					td <code>signin url</code> <code class="data-type">String</code>
					td
						p 当访问者没能通过默认的认证检查（比如没能登录）时弹出的<code>href</code>
						p 默认为<code class="default-value">/keystone/signin</code>，只有<code>auth</code>被设为<code class="default-value">true</code>时才用。
				tr
					td <code>signin redirect</code> <code class="data-type">String</code>
					td
						p 访问者通过内置的登录路由成功登录后弹出的<code>href</code>
						p 默认为<code class="default-value">/keystone</code>
				tr
					td <code>signout url</code> <code class="data-type">String</code>
					td
						p 界面右上角退出链接中的<code>href</code>
						p 如果<code>auth</code>设为<code class="default-value">true</code>，默认为<code class="default-value">/keystone/signout</code>。
				tr
					td <code>signout redirect</code> <code class="data-type">String</code>
					td
						p 访问者通过内置的退出路由成功退出后弹出的<code>href</code>
						p 默认为<code class="default-value">/keystone</code>
			
			p 关于Keystone数据库模型设置和使用的更多信息，请参见<a href="/zh/docs/database">数据库指南</a>。

			a(name='options-email')
			h3 Email 设定
			
			p 使用Keystone.Email的参数
			
			table.table
				col(width=210)
				col
				tr
					td <code>emails</code> <code class="data-type">String</code>
					td
						p 存放email模板的文件夹
				
				tr
					td <code>email locals</code> <code class="data-type">Object</code>
					td
						p 为email设置通用的locals。Keystone的默认email模板需要这个。如果你用自己的模板，可以忽略这个参数。
				tr
					td <code>email rules</code> <code class="data-type">Object</code>
					td
						p 为emails设置替换规则，自动处理development和production之间的差异。
				tr
					td <code>mandrill api key</code> <code class="data-type">String</code>
					td
						p Mandrill API key
				tr
					td <code>mandrill username</code> <code class="data-type">String</code>
					td
						p Mandrill 用户名
					
			a(name='options-ui')
			h3 管理界面参数
			
			p 下面这些参数控制管理后台的一些界面选项：

			table.table
				col(width=210)
				col
				tr
					td <code>wysiwyg images</code> <code class="data-type">Boolean</code>
					td
						p 添加一个图片按钮，从而使你可以在WYSIWYG编辑器中引入来自其它URL的图片。
				tr
					td <code>wysiwyg cloudinary images</code> <code class="data-type">Boolean</code>
					td
						p 添加一个图片上传按钮，在你的WYSIWYG编辑器中直接启用cloudinary图片上传。
				tr
					td <code>wysiwyg additional buttons</code> <code class="data-type">String</code>
					td
						p 允许添加额外功能按钮，比如<code>blockquote</code>。
						p 可以添加的按钮完整清单请见： <a href="http://www.tinymce.com/wiki.php/Controls">http://www.tinymce.com/wiki.php/Controls</a>
				tr
					td <code>wysiwyg additional plugins</code> <code class="data-type">String</code>
					td
						p 可以激活额外插件，插件清单请见： <a href="http://www.tinymce.com/wiki.php/Plugins">http://www.tinymce.com/wiki.php/Plugins</a>
				tr
					td <code>wysiwyg additional options</code> <code class="data-type">Object</code>
					td
						p 可以修改额外TinyMCE参数，比如 <code>{ menubar: true }</code>。
				tr
					td <code>wysiwyg override toolbar</code> <code class="data-type">Boolean</code>
					td
						p 这会去掉wysiwyg模式下的默认按钮组。这个参数应该跟<code>wysiwyg additional buttons</code>和<code>wysiwyg additional plugins</code>一起使用。默认为<code class="data-type">false</code>。
				tr
					td <code>wysiwyg menubar</code> <code class="data-type">Boolean</code>
					td
						p 显示wysiwyg编辑器的菜单栏。默认为<code class="data-type">false</code>.
						p 参见<a href="http://www.tinymce.com/wiki.php/Configuration:menubar">http://www.tinymce.com/wiki.php/Configuration:menubar</a>了解详情。
				tr
					td <code>wysiwyg importcss</code> <code class="data-type">String</code>
					td
						p 为 TinyMCE 设定<code class="data-type">content_css</code> 并配置<code class="data-type">importcss</code> 插件。
						p 参见 <a href="http://www.tinymce.com/wiki.php/Configuration:content_css">http://www.tinymce.com/wiki.php/Configuration:content_css</a> 了解详情。
				
				tr
					td <code>wysiwyg skin</code> <code class="data-type">String</code>
					td
						p 可以修改皮肤。默认为<code class="data-type">keystone</code>。
						p 参见<a href="http://www.tinymce.com/wiki.php/Configuration:skin">http://www.tinymce.com/wiki.php/Configuration:skin</a>了解详情。

							.code-header
								h4 wysiwyg参数范例
							pre: code.language-javascript
								| keystone.init({
								| 'wysiwyg override toolbar': false,
								| 'wysiwyg menubar': true,
								| 'wysiwyg skin': 'lightgray',
								| 'wysiwyg additional buttons': 'searchreplace visualchars,'
								|  + ' charmap ltr rtl pagebreak paste, forecolor backcolor,'
								|  +' emoticons media, preview print ',
								| 'wysiwyg additional plugins': 'example, table, advlist, anchor,'
								|  + ' autolink, autosave, bbcode, charmap, contextmenu, '
								|  + ' directionality, emoticons, fullpage, hr, media, pagebreak,'
								|  + ' paste, preview, print, searchreplace, textcolor,'
								|  + ' visualblocks, visualchars, wordcount',
								| });

			//- a(name='emails')
			//- h2 Emails
			//- 
			//- p ...
			
			
			a(name='services')
			h2 服务
			
			a(name='services-google-analytics')
			h3 谷歌分析
			
			p Keystone的管理界面中支持谷歌分析追踪。要启用追踪，设定下面这些配置参数：
			
			table.table
				col(width=270)
				col
				tr
					td <code>ga property</code> <code class="data-type">String</code>
					td
						p 你的谷歌分析属性
						p 默认为<code class="default-value">process.env.GA_PROPERTY</code>
				tr
					td <code>ga domain</code> <code class="data-type">String</code>
					td
						p 你的谷歌分析域
						p 默认为<code class="default-value">process.env.GA_DOMAIN</code>
			
			p.note 注意，如果你只想在项目前端引入谷歌分析追踪，应该使用跟上面那些参数名称不同的名称。
			
			
			a(name='services-google-maps')
			h3 谷歌地图
			
			p Keystone的<a href="/zh/docs/database#field_location">Location域类型</a>可以集成<a href="http://www.morethanamap.com" target="_blank">谷歌地图API</a>，通过<a href="https://developers.google.com/places/documentation/autocomplete" target="_blank"> Places Autocomplete API</a>自动改进取值(包括发现经纬度)。
			
			p 要启用这些功能，需要<a href="https://code.google.com/apis/console/" target"_blank">从谷歌获取一个API秘钥</a> ，并为它启用Google Maps v3和Google Places API，然后设置下面这些参数：
			
			table.table
				col(width=270)
				col
				tr
					td <code>google api key</code> <code class="data-type">String</code>
					td
						p 你的谷歌API浏览器键，用于认证管理界面中的Javascript Maps API。
						p 默认为<code class="default-value">process.env.GOOGLE_BROWSER_KEY</code>
				tr
					td <code>google server api key</code> <code class="data-type">String</code>
					td
						p 你的谷歌API服务器键，用于认证从服务器端发送的Maps API请求。
						p 默认为<code class="default-value">process.env.GOOGLE_SERVER_KEY</code>
				tr
					td <code>default region</code> <code class="data-type">String</code>
					td
						p 为了将自动完成结果限制在指定区域的<strong>可选</strong>设置。
						p 这个参数是一个区域码，指定为<a href="http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry" target="_blank">IANA语言区域</a>子标签。
						p 每个<code>Location</code>输入域都可以在设定不同的<code>region</code>参数。 
			
			pre: code.language-javascript
				| keystone.set('google api key', 'your-browser-key');
				| keystone.set('google server api key', 'your-server-key');
				| keystone.set('default region', 'au'); // 可选，会将自动完成的结果限制在澳大利亚
			
			p.note 注意，Places Geocoding API的使用有每天2,500次geolocation请求的查询限制，除非你有企业版许可。
			p.note Places Geocoding API只能跟谷歌地图一起用；禁止不在地图上显示的地理编码结果。请确保你的Keystone程序符合谷歌地图API的许可。
			
			
			a(name='services-amazons3')
			h3 亚马逊S3
			
			p KeystoneJS的域类型<a href="/zh/docs/database#field_s3file">S3File</a>支持<a href="http://aws.amazon.com/s3/" target="_blank">亚马逊S3</a>的文件上传和托管。
			
			p 要在你的程序中使用S3File域，需要<a href="https://portal.aws.amazon.com/gp/aws/developer/subscription/index.html?productCode=AmazonS3" target="_blank">注册一个账号</a>，创建一个<strong>S3桶</strong>，获取你的<strong>键</strong>和<strong>密码</strong>。
			
			p 然后设定<code>s3 config</code>参数为包含你的配置的对象(见下文示例)。
			
			p 另外还要设置环境变量<code class="default-value">S3_BUCKET</code>、<code class="default-value">S3_KEY</code>和<code class="default-value">S3_SECRET</code>
			
			pre: code.language-javascript
				| keystone.set('s3 config', { bucket: 'my-bucket', key: 'my-key', secret: 'my-secret' });
			
			p 设置对象也可以包含 'default headers' 属性。 这个属性可以是 <code class="data-type">Object</code> 类型或者是 <code class="data-type">Array</code> 类型。
			
			pre: code.language-javascript
				| keystone.set('s3 config', { 
				|	 bucket: 'my-bucket', 
				|	 key: 'my-key', 
				|	 secret: 'my-secret',
				|	 'default headers':  {
				|	 'x-amz-meta-X-Default-Header': 'Custom Default Value'
				|	 }
				| });
			
			
			a(name='services-azure')
			h3 Windows Azure存储
			
			p KeystoneJS的<a href="/zh/docs/database#field_azurefile">AzureFile</a>域类型支持<a href="http://www.windowsazure.com/" target="_blank">Windows Azure存储</a>的文件上传和托管。
			
			p 要在程序中使用AzureFile域，需要<a href="http://www.windowsazure.com/pricing/free-trial/" target="_blank">注册一个账号</a>，进入<a href="https://manage.windowsazure.com/">Azure管理门户</a>。用新建(按钮)创建一个存储账号，数据服务，存储。在存储账号页面中用按钮“管理访问键”获取访问信息（账号名、键（有效的主键或二级键））。
			
			p 然后将<code>azurefile config</code>参数设为包含你的配置的对象(见下文示例)。
			
			p 另外还要设置环境变量<code class="default-value">AZURE_STORAGE_ACCOUNT</code>和<code class="default-value">AZURE_STORAGE_ACCESS_KEY</code>。
			
			p 注意，<strong>account</strong>属性应该设成你的<strong>存储账号</strong>，<em>不是用户账号</em>。
			
			pre: code.language-javascript
				| keystone.set('azurefile config', { account: 'my storage account', key: 'secret api key' });
			
			
			a(name='services-cloudinary')
			h3 Cloudinary
			
			p <a href="http://cloudinary.com" target="_blank">Cloudinary</a>是一个图片上传/缩放/托管服务，让你在KeystoneJS程序中用<a href="/zh/docs/database#field_cloudinaryimage">CloudinaryImage</a>和<a href="/zh/docs/database#field_cloudinaryimages">CloudinaryImages</a>域类型轻松实现图片管理。
			
			p 要在程序中使用Cloudinary Image域，需要<a href="https://cloudinary.com/users/register/free" target="_blank">注册一个账号</a> (Cloudinary提供的免费服务中包括500MB存储、50,000张图片和1GB数据传输)并获取你的<strong>云名称</strong>、<strong>api键</strong>和<strong>api密码</strong>。
			
			p 然后将<code>cloudinary config</code>参数设为
				ul
					li 包含你的配置的对象(见下文示例)，或
					li Cloudinary给你的环境变量字符串(比如<code class="default-value">cloudinary://api_key:api_secret@cloud_name</code>)
			
			p 这个参数默认为环境变量<code class="default-value">CLOUDINARY_URL</code>，如果设了的话。
			
			p 当通过管理界面或域方法把图片上传到Cloudinary中时，会自动给它们设一些标签。要用定制字符串作为这些标签的前缀，可以设置<code>cloudinary prefix</code>参数。
			
			p 自动设定的内置标签包括：
				ul
					li <code class="default-value">{list.path}_{field.path}</code>
					li <code class="default-value">{list.path}_{field.path}_{item.id}</code>
					li <code class="default-value">{prefix}</code> (如果设了)
					li <code class="default-value">dev</code> (如果参数<code>env</code>没有设成<code class="default-value">production</code>)

			p 将Keystone <code>cloudinary folders</code>参数设为<code class="default-value">true</code>还可以启用Cloudinary的上传文件夹选项。默认的Cloudinary文件夹会基于以下规则设置：
				ul
					li <code class="default-value">{list.path}/{field.path}/</code> (当未设置<code>cloudinary prefix</code>时)
					li <code class="default-value">{prefix}/{list.path}/{field.path}/</code> (设置了<code>cloudinary prefix</code>时)
	
			p.note
				| 你可以直接在<code>CloudinaryImage</code>域(参见<a href="/zh/docs/database#fieldtypes-cloudinaryimage">CloudinaryImage</a> 参数) 或 <code>CloudinaryImages</code>域(参见 <a href="/zh/docs/database#fieldtypes-cloudinaryimages">CloudinaryImages</a> 参数)上设置<code class="default-value">folder</code>参数覆盖默认的 Cloudinary 文件夹。
				br
				br
				| 如果你希望 Cloudinary 在 <code>cloudinary folders</code> 设置为 <code class="default-value">true</code>  的时候自动创建文件夹， 确认已经在你的 Cloudinary 账户中启用 "Auto-create folders"。
				
			p 如果你在使用HTTPS服务，并且确保cloudinary images也通过HTTPS传输, 设置<code>cloudinary secure</code>选项为<code class="default-value">true</code>.
			
			pre: code.language-javascript
				| keystone.set('cloudinary config', { cloud_name: 'my-cloud', api_key: 'abc', api_secret: '123' });
				| // 或
				| keystone.set('cloudinary config', 'cloudinary://api_key:api_secret@cloud_name' );
				| 
				| // 可选，会用'keystone_'作为所有内置标签的前缀
				| keystone.set('cloudinary prefix', 'keystone');
				| 
				| // 可选，会用[{prefix}]/{list.path}/{field.path}/ 作为每个图片的public_id的前缀
				| keystone.set('cloudinary folders', true);
				| 
				| // 可选, 将强制cloudinary服务通过HTTPS传输
				| keystone.set('cloudinary secure', true);
			
			
			a(name='services-embedly')
			h3 Embed.ly
			
			p <a href="http://embed.ly" target="_blank">Embed.ly</a>是一个解析url (比如Youtube的嵌入链接)的服务，并且会返回很多有价值的信息，比如提供者名称，汇总元数据，视频的高度和宽度，以及可以潜在你的视图中的清爽链接。他们提供了每月不超过5,000个url的免费方案。
			
			p <a href="/zh/docs/database#field_embedly">Embedly域类型</a>在你的KeystoneJS程序中集成它们的API的便利方式。
			
			p 配置KeystoneJS支持Embed.ly API，只需要<a href="https://app.embed.ly/signup">注册一个账号</a>，获取你的API键，并设置<code>embedly api key</code>参数。
			
			p 这个参数默认为环境变量<code class="default-value">EMBEDLY_API_KEY</code>，如果设了的话。
			
			pre: code.language-javascript
				| keystone.set('embedly api key', 'your-key');


			a(name='services-mandrill')
			h3 Mandrill
			p <a href="http://mandrill.com" target="_blank">Mandrill</a>是一个可扩展又实惠的email基础设施服务，让你可以轻松地发送邮件。他们提供了每月不超过12,000封email的免费方案。

			p 配置KeystoneJS支持Mandrill API，只需<a href="https://mandrill.com/signup/">注册一个账号</a>，获取你的API键，并设置<code>mandrill api key</code>和<code>mandrill username</code>两个参数。
			
			p 这些参数默认为环境变量<code class="default-value">MANDRILL_API_KEY &amp; MANDRILL_USERNAME</code>，如果设了的话。

			pre: code.language-javascript
				| keystone.set('mandrill api key', 'your-key');
				| keystone.set('mandrill username', 'your-username');

			a(name='services-mailgun')
			h3 Mailgun
			p <a href="http://mailgun.com" target="_blank">Mailgun</a>是另一种可伸缩的，并且价格也很实惠的email基础设施，用它可以轻松发送email。它有一个每月10,000封email的免费方案。

			p 要配置KeystoneJS支持Mailgun API，只需要<a href="https://www.mailgun.com/signup">注册一个账号</a>，得到你的api key，并设定好<code>mailgun api key</code>和<code>mail domain</code>参数。
			
			p KeystoneJS 0.3.19及以后的版本支持Mailgun。
						
			pre: code.language-javascript
				| keystone.set('email transport', 'mailgun');
				| keystone.set('mailgun api key', 'key-xxxxxxxxxxx');
				| keystone.set('mailgun domain', 'example.com');
			
			
			//- h2 Error Handling
			//- 
			//- a(name='404s')
			//- h3 <code>404</code> (not found) errors
			//- 
			//- //-  path to your 404 view template, or a function to handle 404s (standard Express signature of `function(req, res)`)
			//- 
			//- a(name='500s')
			//- h3 <code>500</code> (server error) errors
			
			
			
			a(name='updates')
			h2 应用程序更新
			
			p Keystone中有一个更新框架，将<code>auto update</code>参数设为<code class="default-value">true</code>就可以启用。
			
			p 使用更新框架可以轻松向数据库中植入数据，模型修改时转换数据，或者对数据库运行转换脚本。
			
			p 更新文件应该按照语义版本命名，后面可以跟一个关键字，也可以不跟，比如<code>0.0.1-init.js</code>。版本号用来对更新脚本排序，关键字可以标示更新什么。
			
			p 每个更新文件都应该输出单个函数，这个函数应该接受单个参数 - <code>next(err)</code> 回调，在更新完成时调用。
			
			p 所有的更新文件都会在web服务器启动前执行(每个都等前一个更新完成后开始)。
			
			p 如果<code>next</code>回调收到一个错误，它会报告给控制台，并且程序初始化会终止。
			
			p 在开发时，你可以在输出的函数中将<code>__defer__</code>属性设为<code>true</code>来临时禁用更新。所有后续更新都会跳过，但程序会启动。
			
			p 更新只会运行一次，并且每个已完成的更新都会记录在数据库里的<code>app_updates</code>集合中。
			
			.code-header
				h4 更新脚本示例
				p 创建一个新的管理员用户
			pre: code.language-javascript
				| var keystone = require('keystone'),
				|     User = keystone.list('User');
				| 
				| exports = module.exports = function(done) {
				|     new User.model({
				|         name: { first: 'Admin', last: 'User' },
				|         password: 'admin',
				|         isAdmin: true
				|     }).save(done);
				| };
			
			
			a(name='headless')
			h2 禁用管理界面
			
			p 你可以将<code>headless</code>参数设为<code class="default-value">true</code>来禁用管理界面。
			
			p 这样不用Keystone在<code class="default-value">/keystone</code>下给管理界面创建路由绑定，你可以使用<code>keystone.start()</code>或<code>keystone.routes(app)</code>。
