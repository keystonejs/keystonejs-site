

include ../../templates/mixins/docsnav

block intro
	.page-header
		.container
			h1 Views
			p.lead Using Views with your keystone application
	
block content
	.container: .row
		
		.col-sm-3
			+docsnav(docssection)
		
		.col-sm-9: .docs-content
			
			h2
				a(name='concepts')
				| Concepts
			p The View class makes it easier to write descriptive route handlers without worrying about async code too much. Express routes can get messy when they're handling several different branches, because of the async nature of node.js.
			a(name='queues')
			h2 Queues

			a(name='queue-init')
			h3 Init
			p registers callbacks to run first.

			a(name='queue-action')
			h3 Action
			p `view.on('{REST verb}', callback)`
			p This method differs from what express middleware would do subtly. We can also supply a middle argument to match on e.g.
			.code-header: h4 /views/form.js
			pre: code.language-javascript
				| view.on('post', { action: 'contact' }, function() {
				| handle submission of contact form
				| });
				| view.on('post', { action: 'comment' }, function() {
				|     // let the user leave a comment
				| });
			p This is useful in complicated setups, e.g., multiple forms on a single page. Each form would POST back to the same url, with a hidden field called action in it.

			a(name='queue-render')
			h3 Render
			p final queue to be executed.
