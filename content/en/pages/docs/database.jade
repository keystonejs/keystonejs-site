include ../../templates/mixins/docsnav

block intro
	.page-header
		.container
			h1 Ref:db
			p.lead .List(and configure data models)
	
block content
	.container: .row
		
		.col-sm-3
			+docsnav(docssection)
		
		.col-sm-9: .docs-content
			
			h2
				a(name='concepts')
				| Concepts
			
			.alert.alert-warning
				//- h4 Requirements
				p KeystoneJS requires MongoDB v2.4 or greater.
			
			p In KeystoneJS, your data schema and models are controlled by <strong>Lists</strong>, and documents in your database are often called <strong>Items</strong>.
			
			p To define a data model, you create a <code>new keystone.List</code>, and pass it <a href="#lists-options">list options</a>. 
			
			p You then <code>add</code> fields to the list. Behind the scenes, a Keystone List will create a <a href="http://mongoosejs.com/docs/guide.html" target="_blank">mongoose schema</a>, and add the appropriate paths to it for the fields you define.
			
			p The <code>schema</code> is accessible, allowing you to plug in other mongoose functionality like virtuals, methods and pre / post hooks.
			
			p When you have finished setting up your List, call <code>list.register()</code> to initialise it and register it with Keystone.
			
			p To query your data, you use the <code>list.model</code> (which is a <a href="http://mongoosejs.com/docs/models.html" target="_blank">mongoose model</a>).
			
			p List Items are <a href="http://mongoosejs.com/docs/documents.html" target"_blank">mongoose documents</a>. To create new items, use <code>new list.model()</code> and when you're ready to save it (or to save changes to an existing Item), call <code>item.save()</code>.
			
			a(name='lists')
			h2 Lists
			
			a(name='lists-usage')
			h3 Usage
			
			h4: code new keystone.List(key[, options]);
			
			p The syntax for creating a <strong>Keystone List</strong> is very similar to the syntax for creating a Mongoose Schema, with the exception of the constructor, which is <code class='default-value'>var MyList = new keystone.List(key, options)</code>.
			p Once you have created a new List, add fields to it using <code>MyList.add(fields)</code>, where fields is an object of keys (for field paths) and values (for field types, or options).
			p Fields are defined by an object with a <code>type</code> property, which must be a valid Field Type or basic data type. Using the object syntax you can specify additional options for the field. Common field options and field-type-specific options are detailed in the fields documentation.
			p When all the fields and options have been set on the list, call <code>MyList.register()</code> to register the list with Keystone and finalise its configuration.
			
			a(name='lists-example')
			h3 Example
			p A simple Post model for a blog might look like this:
			
			.code-header: h4 Post.js
			pre: code.language-javascript
				| var keystone = require('keystone'),
				|     Types = keystone.Field.Types;
				| 
				| var Post = new keystone.List('Post', {
				|     autokey: { path: 'slug', from: 'title', unique: true },
				|     map: { name: 'title' },
				|     defaultSort: '-createdAt'
				| });
				| 
				| Post.add({
				|     title: { type: String, required: true },
				|     state: { type: Types.Select, options: 'draft, published, archived', default: 'draft' },
				|     author: { type: Types.Relationship, ref: 'User' },
				|     createdAt: { type: Date, default: Date.now },
				|     publishedAt: Date,
				|     image: { type: Types.CloudinaryImage },
				|     content: {
				|         brief: { type: Types.Html, wysiwyg: true, height: 150 },
				|         extended: { type: Types.Html, wysiwyg: true, height: 400 }
				|     }
				| });
				| 
				| Post.defaultColumns = 'title, state|20%, author, publishedAt|15%'
				| Post.register();
			
			.contextual-note
				h4 Explanation
				p This example implements the optional <code>map</code>, <code>autokey</code> and <code>defaultSort</code> options, described below.
				p The Admin UI will look for <code>map: { name: 'FieldFromDoc'}</code> first, then a document field <code>name</code>, and if those are not available use <code>doc._id</code> as the default column when viewing lists.
				p Our example also specifies <code>title</code>, <code>state</code>, <code>author</code> and <code>publishedAt</code> as the default columns to display in the Admin UI, with state and publishedAt being given column widths. 
				p The <code>author</code> field is a relationship with the <code>User</code> model, as described in the <a href="#relationships">Relationships</a> section.  
			
			a(name='lists-options')
			h3 Options
			
			p Lists support the following options:
			
			table.table
				col(width=210)
				col
				tr
					td <code>autokey</code> <code class="data-type">Object</code>
					td Adds a plugin to the list that automatically generates a key for each document when it is saved, based on the value of another field or path. The value of the option should be an object with the following keys:
						ul.options
							li <code>from</code> <code class="data-type">String</code> - the field or path to generate the key from, can be a space-delimited list of fields
							li <code>path</code> <code class="data-type">String</code> - the path to store the key at
							li <code>unique</code> <code class="data-type">Boolean</code> - whether the key should be unique or not
							li <code>fixed</code> <code class="data-type">Boolean</code> - the key should be kept if it exists and it's non-empty. Defaults to <code class="data-type">false</code>.
						| <em>Autokey paths are automatically indexed; you may also want to include them in compound indexes.</em>
				
				tr
					td <code>defaultColumns</code> <code class="data-type">String</code>
					td A comma-delimited list of default columns to display in the Admin UI List View.
						|  You can specify width in either pixels or percent after a <code>|</code> pipe character.
				
				tr
					td <code>defaultSort</code> <code class="data-type">String</code>
					td The default column or path to sort on in the Admin UI
				
				tr
					td <code>drilldown</code> <code class="data-type">String</code>
					td A space-delimited list of relationships to display as drilldown in the Admin UI

				tr
					td <code>hidden</code> <code class="data-type">Boolean</code>
					td Hides the list in the Keystone Admin UI

				tr
					td <code>inherits</code> <code class="data-type">List</code>
					td A list object that you would like to inherit fields from.

				tr
					td <code>label</code> <code class="data-type">String</code>
					td The label used for the list in the Admin UI. Defaults to a friendly form of <code class="default-value">key</code>

				tr
					td <code>map</code> <code class="data-type">Object</code>
					td An object that maps fields to special <strong>list</strong> paths. Each path defaults to its key if a field with that key is added. Mappable paths include
						ul.options
							li <code>name</code> - the field that contains the name of the item, for display in the Admin UI

				tr
					td <code>nocreate</code> <code class="data-type">Boolean</code>
					td Prevents creation of new items in the list through the Keystone Admin UI

				tr
					td <code>nodelete</code> <code class="data-type">Boolean</code>
					td Prevents deletion of items from the list through the Keystone Admin UI

				tr
					td <code>noedit</code> <code class="data-type">Boolean</code>
					td Prevents editing of items in the list through the Keystone Admin UI

				tr
					td <code>path</code> <code class="data-type">String</code>
					td The path used for the list in the Admin UI. Defaults to a slugified form of <code class="default-value">key</code>.

				tr
					td <code>perPage</code> <code class="data-type">Number</code>
					td The number of List items to display per page. Defaults to 50.

				tr
					td <code>plural</code> <code class="data-type">String</code>
					td The plural label for the items in the list. Used in the Admin UI, defaults to a plural form of <code class="default-value">singular</code>

				tr
					td <code>schema</code> <code class="data-type">String</code>
					td
						p Options for the Mongoose Schema for the List. Among other things, this option lets you specify a custom name for the <strong>collection</strong>. See the <a href="http://mongoosejs.com/docs/guide.html#options" target="_blank">mongoose schema docs</a> for a list of available options.
						p: em Warning: do not modify the <code>id</code> or <code>_id</code> schema options; the default behaviour is required by Keystone

				tr
					td <code>searchFields</code> <code class="data-type">String</code>
					td A comma-delimited list of paths to use for searching in Admin UI

				tr
					td <code>singular</code> <code class="data-type">String</code>
					td The singular label for the items in the list. Used in the Admin UI, defaults to a singular form of <code class="default-value">label</code>

				tr
					td <code>sortContext</code> <code class="data-type">String</code>
					td A <code>List:relationship</code> pair to control when drag and drop sorting is available in the Admin UI

				tr
					td <code>sortable</code> <code class="data-type">Boolean</code>
					td Adds a hidden field <code>sortOrder</code> to the schema, and enables drag and drop sorting in the Admin UI

				tr
					td <code>track</code> <code class="data-type">Boolean or Object</code>
					td
						p Adds a plugin to the list that automatically keeps track of when and who (i.e. which Keystone user) created and last updated an item.
						p When set to <code class="data-type">true</code> all tracking fields are enabled using their default names.
						p You may also selectively enable each field and optionally specify a custom field name by setting <code>track</code> to an <code class="data-type">object</code> with any or all the following fields:
						ul.options
							li <code>createdAt</code> <code class="data-type">Boolean/String</code> - when set to <code class="data-type">true</code>, enables tracking when the item was created (using the default field name <em>createdAt</em>). To use a custom field name set to a <code class="data-type">String</code> with the desired name. Defaults to <code class="data-type">false</code>.
							li <code>createdBy</code> <code class="data-type">Boolean/String</code> - when set to <code class="data-type">true</code>, enables tracking which user created the item (using the default field name <em>createdBy</em>). To use a custom field name set to a <code class="data-type">String</code> with the desired name. Defaults to <code class="data-type">false</code>.
							li <code>updatedAt</code> <code class="data-type">Boolean/String</code> - when set to <code class="data-type">true</code>, enables tracking when the item was last updated (using the default field name <em>updatedAt</em>). To use a custom field name set to a <code class="data-type">String</code> with the desired name. Defaults to <code class="data-type">false</code>.
							li <code>updatedBy</code> <code class="data-type">Boolean/String</code> - when set to <code class="data-type">true</code>, enables tracking which user last updated the item (using the default field name <em>updatedBy</em>). To use a custom field name set to a <code class="data-type">String</code> with the desired name. Defaults to <code class="data-type">false</code>.
						p.note The <code>createdBy</code> and <code>updatedBy</code> fields are only automatically updated when adding/modifying items via the Keystone Admin UI. However, if you intend to add/modify items from within your own app, you must manually set the <code>._req_user</code> property of the item to the currently logged on user (<code>req.user</code>) prior to saving the item, as shown in the example below.
						pre: code.language-javascript
							| var item = new List.model();
							| item.set({ field1: 'value1', field2: 'value2' });
							| item._req_user = req.user;
							| item.save();
			
			p.note If you're wondering how to control which navigation area Lists are categorised under in the Admin UI, check out the <code>nav</code> option in the <a href="http://keystonejs.com/docs/configuration/#options-project">KeystoneJS Configuration</a> docs.
			
			h4 Drilldown example
			
			p The drilldown option is a nice way to improve the usability of the Admin UI by providing context to the item a user is currently editing.
			
			p By default, the drilldown will just show the list that the item belongs to.
			
			p You can, however, set it to a <code>Relationship</code> field in the schema, and it will display the item currently stored in that relationship field.
			
			p If there would be several relationships that may be  to display in the drilldown list, you can separate their paths with spaces.
			
			.code-header: h4 Example: Including the author in the drilldown for Posts
			pre: code.language-javascript
				| var Post = new keystone.List('Post', {
				|     autokey: { path: 'slug', from: 'title', unique: true },
				|     map: { name: 'title' },
				|     defaultSort: '-createdAt',
				|     drilldown: 'author' // author is defined as a Relationship field in the example above
				| });
			
			
			h4 Inheritance example

			p The inheritance option can be used to allow a list to inherit its fields from another list using Mongoose <a href="http://mongoosejs.com/docs/3.7.x/docs/api.html#model_Model.discriminator">model discriminators</a>

			p Parent lists may not themselves inherit from other lists.

			.code-header: h4 Example: Inheriting List fields from other lists
			pre: code.language-javascript
				|var keystone = require('keystone');
				| 
				|var BasePage = new keystone.List('BasePage', {
				|    map: { name: 'title' },
				|	    autokey: { path: 'slug', from: 'title', unique: true },
				|	});
				|BasePage.add(
				|	{
				|		title: { type: String, required: true },
				|		slug: { type: String, readonly: true },
				|	}
				|);
				|BasePage.register();
				| 
				|var ChildPage = new keystone.List('ChildPage', { inherits: BasePage });
				|ChildPage.add({ child_content: { type: String, readonly: true } });
				|ChildPage.register();


			a(name='lists-plugins')
			h3 Schema Plugins
			
			p You can specify <a href="http://mongoosejs.com/docs/guide.html" target="_blank"><strong>virtuals</strong>, <strong>methods</strong>, <strong>statics</strong></a> as well as <a href="http://mongoosejs.com/docs/middleware.html" target="_blank"><strong>pre</strong> and <strong>post</strong> hooks</a> for your <strong>Lists</strong> using the <code>schema</code>. You can also use <a href="http://mongoosejs.com/docs/plugins.html" target="_blank">mongoose plugins</a> from the <a href="http://plugins.mongoosejs.com" target="_blank">plugins website</a>.
			
			p For example, in our <strong>Post</strong> list above, we might want to automatically set the <code>publishedAt</code> value when the <code>state</code> is changed to <code>published</code> (but only if it hasn't already been set).
			
			p We might also want to add a method to check whether the post is published, rather than checking the <code>state</code> field value directly.
			
			p Before calling <code>Post.register()</code>, we would add the following code:
			
			pre: code.language-javascript
				| Post.schema.methods.isPublished = function() {
				|     return this.state == 'published';
				| }
				| 
				| Post.schema.pre('save', function(next) {
				|     if (this.isModified('state') &amp;&amp; this.isPublished() &amp;&amp; !this.publishedAt) {
				|         this.publishedAt = new Date();
				|     }
				|     next();
				| });
			
			
			a(name='lists-querying')
			h3 Querying Data
			
			p To query data, you can use any of the <a href="http://mongoosejs.com/docs/queries.html" target="_blank">mongoose query</a> methods on the <code>list.model</code>.
			
			p <strong>For example:</strong> to load the last 5 <code>posts</code> with the state <code>published</code>, populating the linked <code>author</code>, sorted by reverse published date:
			
			.code-header: h4 Loading Posts
			pre: code.language-javascript
				| var keystone = require('keystone'),
				|     Post = keystone.list('Post');
				| 
				| Post.model.find()
				|     .where('state', 'published')
				|     .populate('author')
				|     .sort('-publishedAt')
				|     .limit(5)
				|     .exec(function(err, posts) {
				|         // do something with posts
				|     });

			p <strong>Promises</strong>

			p There exists another way to work with events in Javascript that is included in mongoose query methods. Instead of passing a <a href="http://javascriptissexy.com/understand-javascript-callback-functions-and-use-them/" target="_blank">callback</a> to the  <a href="http://mongoosejs.com/docs/api.html#query_Query-exec" target="_blank">exec</a> method, we can use what it returns: a <a href="http://www.html5rocks.com/en/tutorials/es6/promises/" target="_blank">Promise</a>. Promises are very useful for clean chaining of events with propagation of error.

			p <strong>For example:</strong> load 100 <code>posts</code>, then do something asynchronous, then do something with result:
			
			.code-header: h4 Loading Posts, doing something asynchronous, doing something
			pre: code.language-javascript
				| var keystone = require('keystone'),
				|     Post = keystone.list('Post');
				| 
				| Post.model.find()
				|     .limit(100)
				|     .exec()
				|     .then(function (posts) { //first promise fulfilled
				|         //return another async promise
				|     }, function (err) { //first promise rejected
				|         throw err;
				|     }).then(function (result) { //second promise fulfilled
				|         //do something with final results
				|     }, function (err) { //something happened
				|         //catch the error, it can be thrown by any promise in the chain
				|         console.log(err);
				|     });
				
			a(name='lists-paginate')
			h3 Pagination Querying
			
			p To query data with pagination, you can use <code>List.paginate()</code>,it returns a query object, just as <code>List.model.find()</code> would. It supports the options
			ul
				li <code>page</code> - page to start at
				li <code>perPage</code> - number of results to return per page
				li <code>maxPages</code> - optional, causes the page calculation to omit pages from the beginning/middle/end(useful if you have lots of pages, and do not want them to wrap over several lines).
			
			p <strong>For example:</strong> to load the <code>posts</code> with the <code>maxPages</code> 10 and <code>perPage</code> 10,which state is <code>published</code>, populating the linked <code>author</code> and <code>categories</code>, sorted by reverse published date:
			
			.code-header: h4 Loading Posts with paginate
			pre: code.language-javascript
				| var keystone = require('keystone'),
				|     Post = keystone.list('Post');
				| 
				|  Post.paginate({
				|		page: req.query.page || 1,
				|		perPage: 10,
				|		maxPages: 10
				|	})
				|	.where('state', 'published')
				|	.sort('-publishedDate')
				|	.populate('author categories')
				|	.exec(function(err, results) {
				|		locals.data.posts = results;
				|		next(err);
				|	});
			p When you call <code>exec</code> on a paginated query, it will return a lot of metadata along with the results:
			ul
				li <code>total</code>: all matching results (not just on this page)
				li <code>results</code>: array of results for this page
				li <code>currentPage</code>: the index of the current page
				li <code>totalPages</code>: the total number of pages
				li <code>pages</code>: array of pages to display
				li <code>previous</code>: index of the previous page, false if at the first page
				li <code>next</code>: index of the next page, false if at the last page
				li <code>first</code>: the index of the first result included
				li <code>last</code>: index of the last result included

			a(name='lists-creating')
			h3 Creating Items
			
			p To create new items, again use the <a href="http://mongoosejs.com/docs/models.html" target"_blank">mongoose model</a>:
			
			.code-header: h4 Creating Posts
			pre: code.language-javascript
				| var keystone = require('keystone'),
				|     Post = keystone.list('Post');
				| 
				| var newPost = new Post.model({
				|     title: 'New Post'
				| });
				| 
				| if (shouldBePublished) {
				|     newPost.state = 'published';
				| }
				| 
				| newPost.save(function(err) {
				|     // post has been saved	
				| });
			
			.contextual-note
				h4 Automatic keys
				p Because we set the <code>autokey</code> option on our <code>Post</code> list, it will have generated a unique key based on the <code>title</code> before it was saved to the database.
				pre
					| newPost.slug == 'new-post';
			
			a(name='lists-deleting')
			h3 Deleting Items
			
			p To delete items, first load the data, then use the <code>remove</code> method:
			
			.code-header: h4 Deleting a Post
			pre: code.language-javascript
				| var keystone = require('keystone'),
				|     Post = keystone.list('Post');
				| 
				| Post.model.findById(postId)
				|     .remove(function(err) {
				|         // post has been deleted
				|     });
			
			// TODO: Documentation for Schema features (virtuals, methods, statics and hooks)
			
			// TODO: Documentation for Update Handler
			a(name='headings')
			h2 Headings
			
			p Define headings to display within the flow of your documents.  Headings can be defined as a <code>String</code> or <code>Object</code> and can <a href="#dependsOn">depend on</a> another field value for display.
			
			pre: code.language-javascript
				| Person.add(
				|	'User', 
				| 	{ name: { type: Types.Name, required: true, index: true, initial: true } }, 
				| 	'Permissions', 
				| 	{ isAdmin: { type: Boolean, label: 'Can access Keystone', index: true } },
				| 	// header object
				| 	{ heading: 'Activities' }, 
				|	{ place: { type: Types.Select, options: ['GT', 'UGA'] } },
				| 	// header with dependsOn
				| 	{ heading: "GT Activities", dependsOn: { place: 'GT' } },
				| 	{ type: { type: Types.Select, options: ['ZC', 'MP'], dependsOn: { place: 'GT'} }
				| );
			
			.options
				
				h5 Options
				p <code>heading</code> <code class="data-type">String</code> - the text to display
				p <code>dependsOn</code> <code class="data-type">Object</code> - heading will only be displayed when the paths specified in the object match the current data for the item. <a href="#dependsOn">dependsOn</a>
				
				
			a(name='fields')
			h2 Fields
			
			p When adding <strong>fields</strong> to <strong>Lists</strong>, you can either specify basic data types or Keystone Field Types.
			
			a(name='fields-overview')
			h3 Overview
			
			p <strong>Keystone Fields</strong> allow you to easily add rich, functional fields to your application's models. They are designed to describe not just the <em>structure</em> of your data, but also the <em>intention</em> of your data. They provide:
			ul
				li Rich controls in Keystone's Admin UI
				li Complex data types; e.g. the <code>location</code> field stores several strings and an GeoJSON lng/lat point
				li Formatting and validation methods
				li Additional virtual properties; e.g. the <code>name</code> field provides a <code>name.full</code> virtual which concatenates the stored <code>name.first</code> and <code>name.last</code>
				li Underscore methods; e.g. the <code>password</code> field provides a <code>password.compare</code> method for testing against the encrypted hash
				li Metadata about how fields relate to each other; e.g. which fields depend on certain values in other fields
			
			p Basic data types are mapped to their corresponding Keystone field types:
			
			table.table(style="width:200px")
				col
				col
				thead
					th Data type
					th Field type
				tr
					td: code.data-type String
					td: code.data-type Text
				tr
					td: code.data-type Number
					td: code.data-type Number
				tr
					td: code.data-type Date
					td: code.data-type DateTime
				tr
					td: code.data-type Boolean
					td: code.data-type Boolean
			
			a(name='fields-options')
			h3 Field Options
			
			p All field types support several common options, which can specify database settings (such as <code>index</code> and <code>default</code>), or can provide information for Keystone's Admin UI (such as <code>label</code>).
			
			p.note Fields can be nested inside objects, as in mongoose schemas.
			
			p.note All <a href="http://mongoosejs.com/docs/schematypes.html" target="_blank">mongoose schema type options</a> are passed to the <a href="http://mongoosejs.com/docs/guide.html" target="_blank">mongoose schema</a>, so you can also use any options mongoose supports.
			
			p Common field options include:
			
			table.table
				col(width=210)
				col
				tr
					td <code>label</code> <code class="data-type">String</code>
					td The label of each field is generated from the field path; set this option to override the default.
				tr
					td <code>required</code> <code class="data-type">Boolean</code>
					td Validates that the field has a value before an item can be saved (<em>also passed to mongoose and enforced using a database index</em>).
				tr
					td <code>initial</code> <code class="data-type">Boolean</code>
					td Causes the field to be displayed in the <strong>Create Item</strong> form, in the Admin UI.
				tr
					td <code>noedit</code> <code class="data-type">Boolean</code>
					td Renders the field as read-only in the admin UI.
				tr
					td <code>note</code> <code class="data-type">String</code>
					td Is displayed with the field in the admin UI.
				tr
					td <code>hidden</code> <code class="data-type">Boolean</code>
					td The field will always be hidden in the Admin UI if this is set to <code class="default-value">true</code>
			
			a(name="fields-conditional")
			h3 Conditional Fields
			
			p To improve the usability of the Admin UI, it is possible to hide fields when no value is set, or depending on the value of other fields.
			
			table.table
				col(width=210)
				col
				tr
					td <code>collapse</code> <code class="data-type">Boolean</code>
					td Displays an <strong>+ <u>add</u></strong> link in the admin UI when the field has no value. Will completely hide field UI when <code>noedit</code> is also set to true, when the field has no value
				tr
					td: a(name='dependsOn') <code>dependsOn</code> <code class="data-type">Object</code>
					td: p The field or header will only be displayed when the paths specified in the object match the current data for the item.
						p You can target multiple values per path using an Array.
						.code-header: h4 Example
						pre: code.language-javascript
							| first: { type: String },
							| // Will show if first === "value1", "1" or "2"
							| second: { type: String, dependsOn: { first: ['value1', '1', 2] } },
							| // Will show if first == "value1"
							| third: { type: String, dependsOn: { first: 'value1' } }

			
			a(name="fields-watching")
			h3 Generated values and watching fields
			
			p Keystone's fields support a simple syntax for configuring dynamically updated fields. You can set a field to update its value whenever:
			
			ul
				li The item is saved
				li The value of any other field (or fields) changes
				li The value of any other field (or fields) changes to a specific value
			
			p To use the watching functionaliy, set the following two options:
				
			table.table
				col(width=210)
				col
				tr
					td <code>watch</code> <code class="data-type">Boolean</code> or <code class="data-type">String</code> or <code class="data-type">Object</code> or <code class="data-type">Function</code>
					td
						p When <code class="default-value">true</code>, the field value will be recalculated every time an item is saved. <br>
						p Provide a space-delimited list of paths to recalculate the field value whenever one of those paths changes. <br><strong>For example:</strong> <code class="default-value">'author title state'</code>
						p Provide an object of key / value pairs to recalculate the field value whenever one of those paths changes to the value specified. <br><strong>For example:</strong> <code class="default-value">{'state': 'published', 'mainPost': true}</code>
						p Provide a function that returns true/false whenever you want. <br><strong>For example:</strong> <code class="default-value">function() { return this.author === this.editor; }</code>
				tr
					td <code>value</code> <code class="data-type">Function</code>
					td
						p The function to generate the field value when a watched path is changed. Must return the new value, or accept a node-style <code>callback</code> argument, which can be called to set the field value asynchronously.
						p The <code>this</code> context of the function will be the item being saved.
						.code-header: h4 Example (synchronous)
						pre: code.language-javascript
							| function () {
							|     return this.total<=this.totalreceived ? true:false;
							| }
						.code-header: h4 Example (asynchronous)
						pre: code.language-javascript
							| function (callback) { // BEWARE: MUST be called "callback" to allow asynchronous execution
							|	list.model.findById(this.createdBy).exec(function(err, user){
							|		callback(err, user.name + "-" + Date.now());
							|	});
							| }
			
			//- TODO: Documentation for field methods
			
			a(name="fields-underscoremethods")
			h3 Underscore Methods
			
			p Some field types include helpful <strong>underscore methods</strong>, which are available on the item at the field's path preceded by an underscore.
			p <strong>For example</strong>: use the <code>format</code> underscore method of the <code>createdAt</code> <code class="data-type">DateTime</code> field of the Posts List (above) like this
			
			pre: code.language-javascript
				| var keystone = require('keystone'),
				|     Post = keystone.list('Post');
				| 
				| Post.model.findById(postId).exec(function(err, post) {
				|    console.log(post._.createdAt.format('Do MMMM YYYY')); // 25th August 2013
				| });
			
			
			a(name="relationships")
			h2 Relationships
			
			p Keystone enhances MongoDB's ability to store the ObjectIDs of related documents in a field (or many related ObjectIDs in an Array) with support for Relationship fields and Definitions in Models.
			
			a(name="relationship-fields")
			h3 Relationship Fields
			
			h4 <code class="data-type">ObjectId</code> or <code class="data-type">Array</code> &mdash; Displayed as an auto-suggest field in the Admin UI
			
			p Stores references to ObjectIDs from another Model in an ObjectID field or array to create one-many or many-many relationships.
			
			p Specify the related Model using the <code>ref</code> option. For a many-many relationship, set the <code>many</code> option to <code class="default-value">true</code>.
			
			p For example, if you wanted to link a <strong>Post</strong> model to a single <strong>Author</strong> and many <strong>PostCategories</strong>, you would do it like this:
			
			pre: code.language-javascript
				| Post.add({
				|     author: { type: Types.Relationship, ref: 'User' },
				|     categories: { type: Types.Relationship, ref: 'PostCategory', many: true }
				| });
			
			h5 Relationship Filters
			
			p You can filter a relationship field using the <code>filters</code> option.

			p The <code>filters</code> option is an object of key/value pairs, in which the keys correspond to the fields of the related model to be filtered, and the values will either be literals or field names in the current model, the value of which will be used to filter the relationship.

			p In the example below, the <code>author</code> field will only allow selection of a <code>User</code> whose <code>group</code> field is equal to 'admin'.
			
			pre: code.language-javascript
				| Post.add({
				|     title: { type: String, required: true },
				|     category: { type: Types.Select, options: 'user, editor, admin', default: 'user' },
				|     author: { type: Types.Relationship, ref: 'User', filters: { group: 'admin' } }
				| });
			
			p You can also filter by the value of another field on the model. You do this setting the value of the filter to the name of the field, prefixed by a colon (:). 

			p In the example below, the <code>author</code> field will only allow selection of a <code>User</code> whose <code>group</code> field is equal to the value of the <code>category</code> field of the <code>Post</code> model.

			pre: code.language-javascript
				| Post.add({
				|     title: { type: String, required: true },
				|     category: { type: Types.Select, options: 'user, editor, admin', default: 'user' },
				|     author: { type: Types.Relationship, ref: 'User', filters: { group: ':category' } }
				| });

			p Finally, you can also filter by the current model's <code>_id</code> field.
			
			p In the example below, the <code>bestPost</code> field will only allow selection of a <code>Post</code> whose <code>author</code> field is equal to the <code>_id</code> of the current document.

			pre: code.language-javascript
				| User.add({
				|     name: { type: String, required: true },
				|     group: { type: Types.Select, options: 'user, editor, admin', default: 'user' },
				|     bestPost: { type: Types.Relationship, ref: 'Post', filters: { author: ':_id' } }
				| });

			p.note You can only set filters on one-many relationships (i.e. when the <code>many</code> option is NOT set to <code class="default-value">true</code>).
			
			h5 Populating related data in queries
			
			p You can populate related data for relationship fields thanks to <a href="http://mongoosejs.com/docs/populate.html" target="_blank">Mongoose's populate functionality</a>. To populate the author and category documents when loading a Post from the example above, you would do this:
			
			pre: code.language-javascript
				| Post.model.findOne().populate('author categories').exec(function(err, post) {
				|     // the author is a fully populated User document
				|     console.log(post.author.name);
				| });
			
			p.note Note that if no ObjectId is stored, or an invalid ObjectId is stored (e.g. a document has been deleted), <code>author</code> will be <code class="data-type">undefined</code> in the example above.
			
			a(name="relationship-definitions")
			h3 Relationship Definitions
			
			p What if, in the example above, you wanted to see a list of the Posts by each Author? Because the relationship field is on the Post, you need to tell the Author (and the PostCategory) Model that it is being referred to. Doing so allows the Admin UI to represent the relationship from both sides.
			
			p You do this by calling the <code>relationship</code> method on the <code>Model</code> like this:
			
			pre: code.language-javascript
				| User.relationship({ path: 'posts', ref: 'Post', refPath: 'author' });
			
			.options
				
				h5 Options
				p <code>path</code> <code class="data-type">String</code> - the path of the relationship reference on the Model
				p <code>ref</code> <code class="data-type">String</code> - the key of the referred Model (the one that has the relationship field)
				p <code>refPath</code> <code class="data-type">String</code> - the path of the relationship being referred to in the referred Model
			
			p As you can see, the options provided to the <code>relationship</code> method mirror those of the relationship field it refers to.
			
			p.note Relationship definitions are optional; if you leave them out, the relationships simply won't be displayed in the Admin UI from the other side of the relationship. The relationship field will still work as expected.
			
			a(name="relationship-queries")
			h3 Loading related items
			
			p Filtering one-to-many related items is easy; simply specify the ID of the item you wish to filter on like any other value:
			
			pre: code.language-javascript
				| Post.model.find().where('author', author.id).exec(function(err, posts) {
				|     // ...
				| });
				
			p To filter many-to-many related items, use an <code>in</code> condition and specify one (or more) ids as an array:
			
			pre: code.language-javascript
				| Post.model.find().where('categories').in([category.id]).exec(function(err, posts) {
				|     // ...
				| });
			
			
			a(name="fieldtypes")
			h2 Field Types
			
			
			a(name="fieldtypes-boolean")
			h3 <code>Boolean</code>
			h4 <code class="data-type">Boolean</code> &mdash; Displayed as a checkbox in the Admin UI
			pre: code.language-javascript { type: Types.Boolean }
			
			a(name="fieldtypes-code")
			h3 <code>Code</code>
			h4 <code class="data-type">String</code> &mdash; Displayed with CodeMirror in the Admin UI.
			pre: code.language-javascript { type: Types.Code, height: 180, language: json }
			.options
				
				h5 Options
				p <code>height</code> <code class="data-type">Number</code> - the height of the field (in pixels). Default: 180
				p <code>language</code> <code class="data-type">String</code> - the language in the code field.
				| Supported Languages: <code>asp, c, coffee, css, c++, html, ini</code>
				| <code> jade, java, js, json, jsp, less, lisp</code>
				| <code>objectivec, perl, php, python, ruby, sass, sh, sql, tpl, vb, xml</code>
			
			
			a(name="fieldtypes-color")
			h3 <code>Color</code>
			h4 <code class="data-type">Color</code> &mdash; Displayed as a text field with a color picker
			pre: code.language-javascript { type: Types.Color }

			
			a(name="fieldtypes-date")
			h3 <code>Date</code>
			h4 <code class="data-type">Date</code> &mdash; Displayed as a date picker in the Admin UI
			p.note Input should either be a valid <strong>Date</strong>, or a string in the format <strong>YYYY-MM-DD</strong> (can be blank unless field is required)
			p.note To default Date fields to the current time, set the <code>default</code> option to <code class="default-value">Date.now</code>
			pre: code.language-javascript { type: Types.Date }
			.options
				
				h5 Options
				p <code>format</code> <code class="data-type">string</code> - the default format pattern to use, defaults to <code class="default-value">Do MMM YYYY</code>
				p <code>yearRange</code> <code class="data-type">Array</code> <code class="default-value">minYear, maxYear</code> - the default range of years to be displayed.
				p See the <a href="http://momentjs.com/docs/#/displaying/format/" target="_blank">momentjs format docs</a> for information on the supported formats and options.
				
				h5 Underscore methods
				p <code>format(string)</code> - formats the stored value using <a href="http://momentjs.com" target="_blank">momentjs</a>
				p <code>moment()</code> - returns a <a href="http://momentjs.com" target="_blank">momentjs</a> object initialised with the value of the field
				p <code>parse(input, format, ...)</code> - parses input using <a href="http://momentjs.com" target="_blank">momentjs</a>, sets the field value and returns the moment object
				p See the <a href="http://momentjs.com/docs/#/parsing/" target="_blank">momentjs parse docs</a> for information on the supported formats and options for the <code>parse</code> method.
				pre: code.language-javascript
					| item.createdDate = Date.now();
					| item._.createdDate.format(); // returns today's date using the default format string
					| item._.createdDate.parse('2013-12-04'); // returns a moment object with the parsed date
					| item._.createdDate.format('YYYY-MM-DD'); // returns '2013-12-04'

			
			a(name="fieldtypes-datetime")
			h3 <code>Datetime</code>
			h4 <code class="data-type">Datetime</code> &mdash; Displayed as a date and time picker in the Admin UI
			p.note Input should either be a valid <strong>Date</strong>, or a string in the format <code class="default-value">YYYY-MM-DD</code> (can be blank unless field is required)
			p.note To default Date fields to the current time, set the <code>default</code> option to <code>Date.now</code>
			pre: code.language-javascript { type: Types.Datetime, default: Date.now }
			.options
				
				h5 Options:
				p <code>format</code> <code class="data-type">string</code> - the default format pattern to use, defaults to <code class="default-value">Do MMM YYYY hh:mm:ss a</code>
				p See the <a href="http://momentjs.com/docs/#/displaying/format/" target="_blank">momentjs format docs</a> for information on the supported formats and options.
				
				h5 Underscore methods:
				p <code>format(string)</code> - formats the stored value using <a href="http://momentjs.com" target="_blank">momentjs</a>
				p <code>moment()</code> - returns a <a href="http://momentjs.com" target="_blank">momentjs</a> object initialised with the value of the field
				p <code>parse(input, format, ...)</code> - parses input using <a href="http://momentjs.com" target="_blank">momentjs</a>, sets the field value and returns the moment object
				p See the <a href="http://momentjs.com/docs/#/parsing/" target="_blank">momentjs parse docs</a> for information on the supported formats and options for the <code>parse</code> method.
			
			a(name="fieldtypes-email")
			h3 <code>Email</code>
			h4 <code class="data-type">String</code> &mdash; Displayed as a text field in the Admin UI
			p.note Input must look like a valid email address (can be blank unless field is required)
			pre: code.language-javascript { type: Types.Email, displayGravatar: true }
			.options
				
				h5 Options
				p <code>displayGravatar</code> <code class="data-type">Boolean</code> - whether to display a gravatar image in the Admin UI
				
				h5 Underscore methods:
				p <code>gravatarUrl(input, size, defaultImage, rating)</code> - generates a gravatar image request url
				pre: code.language-javascript
					| item.email = "demo@keystonejs.com";
					| item._.email.gravatarUrl(); // "//www.gravatar.com/avatar/74a0071e5f3a7107b570b7d4a1a7619d?s=80&d=identicon&r=g"
					| item._.email.gravatarUrl(200,'mm','r'); // "//www.gravatar.com/avatar/74a0071e5f3a7107b570b7d4a1a7619d?s=200&d=mm&r=r"
			
			a(name="fieldtypes-html")
			h3 <code>Html</code>
			h4 <code class="data-type">String</code> &mdash; Displayed as a text field or WYSIWYG Editor in the Admin UI.
			pre: code.language-javascript { type: Types.Html, wysiwyg: true }
			.options
				
				h5 Options
				p <code>wysiwyg</code> <code class="data-type">Boolean</code> - whether to display a WYSIWYG editor in the Admin UI  - for customizations of the editor see the <a href="/docs/configuration/#options-ui">Admin UI Options</a>.
				p <code>height</code> <code class="data-type">Number</code> - the height of the field (in pixels)
			
			p See the <a href="/docs/configuration#options-ui">Admin UI Options</a> for global configuration options that can be used to customise the WYSIWYG editor.
			
			
			a(name="fieldtypes-key")
			h3 <code>Key</code>
			h4 <code class="data-type">String</code> &mdash; Displayed as a text field in the Admin UI
			p Automatically converts input to a valid key (no spaces or special characters). White space is replaced with a separator.
			pre: code.language-javascript { type: Types.Key }
			.options
				
				h5 Options
				p <code>separator</code> <code class="data-type">String</code> - the separator to use when replace white space in the input; defaults to <code class="default-value">-</code>
			
			a(name="fieldtypes-location")
			h3 <code>Location</code>
			h4 <code class="data-type">Object</code> &mdash; Displayed as a combination of fields in the Admin UI
			p Contains a standard set of strings for storing an address, and a longitude / latitude point with a <code class="data-type">2dsphere</code> index.
			p Also provides autocomplete functionality using Google's Geocoding API. This requires either a Google Maps API key to be provided (see the <a href="/docs/configuration#services-google">Google configuration documentation</a> for details), or the option "<code>geocodeGoogle</code>" to be set to <code>true</code>.
			p Providing an API key allows you to monitor your application's API usage in the Google Developers Console and enables per-key instead of per-IP-address quota limits.
			p The Geocoding API may only be used in accordance with the Google Maps API License. 
			pre: code.language-javascript { type: Types.Location, defaults: { country: 'Australia' } }
			p.note Note: the schema paths are based on Australian address formats, and should be updated to be more appropriate for other international formats. If you have feedback on how the structure should be internationalised, please open a ticket.
			.options
				
				h5 Options
				p <code>defaults</code> <code class="data-type">Object</code> - default values for each path in the field schema
				p <code>geocodeGoogle</code> <code class="data-type">Boolean</code> - activate or deactivate the Google Geocoding API, whether an API key is set or not.
				
				h5 Schema
				p <code>name</code> <code class="data-type">String</code> - building name
				p <code>number</code> <code class="data-type">String</code> - unit or shop number
				p <code>street1</code> <code class="data-type">String</code> - street address
				p <code>street2</code> <code class="data-type">String</code> - street address line 2
				p <code>suburb</code> <code class="data-type">String</code>
				p <code>state</code> <code class="data-type">String</code>
				p <code>postcode</code> <code class="data-type">String</code>
				p <code>country</code> <code class="data-type">String</code>
				p <code>geo</code> <code class="data-type">Array</code> <code class="default-value">longitude, latitude</code>
				p.note <strong>Important</strong>: as per the MongoDB convention, the order for the <strong>geo</strong> array must be <code class="default-value">lng, lat</code> which is the opposite of the order used by Google's API.
				
				h5 Underscore methods
				p <code>googleLookup(region, update, callback)</code> - autodetect the full address and lng, lat from the stored value.
				ul
					li <code>region</code> <code class="data-type">String</code> is passed to the Places API for regional biasing and filtering.
					li <code>update</code> <code class="data-type">String</code> passing <code class="default-value">"overwrite"</code> will completely overwrite existing data with the result. <code class="default-value">true</code> will set blank properties on the field with the result.
					li <code>callback(err, location, result)</code> - is passed the parsed <strong>location</strong> object, and the raw <strong>result</strong> from Google.
				
				p Internal status codes mimic the Google API status codes. See <a href="https://developers.google.com/maps/documentation/geocoding/" target="_blank">https://developers.google.com/maps/documentation/geocoding/</a> for more information.
				p Use of the Google Geocoding API is subject to a query limit of 2,500 geolocation requests per day, except with an enterprise license.
				p The Geocoding API may only be used in conjunction with a Google map; geocoding results without displaying them on a map is prohibited. Please make sure your Keystone app complies with the Google Maps API License.
			
			a(name="fieldtypes-markdown")
			h3 <code>Markdown</code>
			h4 <code class="data-type">Object</code> &mdash; Displayed as a textarea field in the Admin UI
			pre: code.language-javascript { type: Types.Markdown }
			.options
				
				h5 Options
				p <code>height</code> <code class="data-type">Number</code> - defines the height of the markdown editor; defaults to <code class="default-value">90</code>.
				pre: code.language-javascript
					| { type: Types.Markdown, height: 200 }
				p <code>toolbarOptions</code> <code class="data-type">Object</code> - allow customizations of the toolbar.
				p <code>toolbarOptions.hiddenButtons</code> <code class="data-type">String</code> - Comma separated list of buttons to hide.
				pre: code.language-javascript
					| { type: Types.Markdown, toolbarOptions: { hiddenButtons: 'H1,H6,Code' } }

				h5 Schema
				p The markdown field will automatically convert markdown to html when the <code>md</code> property is changed, via a setter on the <code>md</code> path.
				p <code>md</code> <code class="data-type">String</code> - source markdown text
				p <code>html</code> <code class="data-type">String</code> - generated html code
				pre: code.language-javascript
					| Page.add({ content: Types.Markdown });
					| 
					| var page = new Page.model();
					| page.content.md = "# Hello World";
					| page.content.html == "&lt;h1&gt;Hello World&lt;/h1&gt;";
					| 
					| // or...
					| 
					| Page.fields.content.updateItem(page, "* list item");
					| page.fields.content.format(page) == "&lt;ul&gt;&lt;li&gt;list item&lt;/ul&gt;&lt;/li&gt;";
					
			a(name="fieldtypes-money")
			h3 <code>Money</code>
			h4 <code class="data-type">Number</code> &mdash; Displayed as a number field in the Admin UI
			p Input should either be a valid <strong>Number</strong>, or a string that can be converted to a number (leading symbols are allowed; can be blank unless field is required).
			pre: code.language-javascript { type: Types.Money }
			.options
				h5 Options
				p <code>format</code> <code class="data-type">String</code>, formats the stored value using <a href="http://numeraljs.com" target="_blank">numeraljs</a>.
				pre: code.language-javascript { type: Types.Money, format: '$0,0.00' }
				p <code>currency</code> <code class="data-type">String</code>, loads a predefined object of settings for a specific language, the language must exist as a .js in numeral/languages folder.
				pre: code.language-javascript { type: Types.Money, currency: 'en-gb' }
				
				h5 Underscore methods
				p <code>format(string)</code> - formats the stored value using <a href="http://numeraljs.com" target="_blank">numeraljs</a>. Set to <code class="default-value">false</code> to disable automatic formatting.
				p Format string defaults to <code class="default-value">$0,0.00</code>
			
			a(name="fieldtypes-name")
			h3 <code>Name</code>
			h4 <code class="data-type">Object</code> &mdash; Displayed as <strong>firstname</strong> <strong>lastname</strong> fields in the Admin UI
			pre: code.language-javascript { type: Types.Name }
			.options
				
				h5 Schema
				p The name field adds <code>first</code> and <code>last</code> <code class="data-type">String</code> paths to the schema, as well as a <code>full</code> virtual getter and setter.
				p <code>first</code> <code class="data-type">String</code> - first name
				p <code>last</code> <code class="data-type">String</code> - last name
				
				h5 Virtuals
				p <code>full</code> <code class="data-type">String</code> - first and last name, concatenated with a space (if both have a value)
				p The <code>name.full</code> setter splits input at the first space.
					
			a(name="fieldtypes-number")
			h3 <code>Number</code>
			h4 <code class="data-type">Number</code> &mdash; Displayed as a number field in the Admin UI
			p Input should either be a valid <strong>Number</strong>, or a string that can be converted to a number (can be blank unless field is required)
			pre: code.language-javascript { type: Types.Number }
			.options
				
				h5 Underscore methods
				p <code>format(string)</code> - formats the stored value using <a href="http://numeraljs.com" target="_blank">numeraljs</a>. Set to <code class="default-value">false</code> to disable automatic formatting.
				p Format string defaults to <code class="default-value">0,0[.][000000000000]</code>
			


			a(name="fieldtypes-numberarray")
			h3 <code>Numberarray</code>
			h4 <code class="data-type">Array</code> &mdash; Displayed as a series of number fields in the Admin UI
			pre: code.language-javascript { type: Types.Numberarray }
			.options
				
				h5 Underscore methods
				p <code>format(string)</code> - formats the stored value using <a href="http://numeraljs.com" target="_blank">numeraljs</a>. Set to <code class="default-value">false</code> to disable automatic formatting.
				p Format string defaults to <code class="default-value">0,0[.][000000000000]</code>
		

			

			
			
			a(name="fieldtypes-password")
			h3 <code>Password</code>
			h4 <code class="data-type">String</code> &mdash; Displayed as a password field in the Admin UI, with a 'change' button.
			
			p Passwords are automatically encrypted with bcrypt, and expose a method to compare a string to the encrypted hash.
			p.note The encryption happens with a <strong>pre-save hook</strong> added to the <strong>schema</strong>, so passwords set will not be encrypted until an item has been saved to the database.
			pre: code.language-javascript { type: Types.Password }
			.options
				
				h5 Options
				p <code>workFactor</code> <code class="data-type">Number</code> - the bcrypt workfactor to use when generating the hash, higher numbers are slower but more secure (defaults to <code class="default-value">10</code>)
				
				h5 Underscore methods
				p <code>compare(candidate, callback)</code> - encrypts the candidate and compares it against the encrypted hash
				ul
					li <code>candidate</code> <code class="data-type">String</code> to compare
					li <code>callback(err, result)</code> - <strong>result</strong> is <code class="default-value">true</code> if the candidate matches the stored password, or <code class="default-value">false</code> if it doesn't
				
				h5 Special paths
				p <code>{path}_compare</code> - when provided to the <strong>updateHandler</strong>, it will be checked against <code>{path}</code> and validation will fail if they don't match.
			
			
			a(name="fieldtypes-select")
			h3 <code>Select</code>
			h4 <code class="data-type">String</code> or <code class="data-type">Number</code> &mdash; Displayed as a select field in the Admin UI
			p.note Similar to <code>Enum</code> in other Frameworks.
			pre: code.language-javascript { type: Types.Select, options: 'first, second, third' }
			.options
				
				h5 Options
				p <code>numeric</code> <code class="data-type">Boolean</code> when <code class="default-value">true</code>, causes the value of the field to be stored as a <code class="data-type">Number</code> instead of a <code class="data-type">String</code>
				pre: code.language-javascript { type: Types.Select, numeric: true, options: [{ value: 1, label: 'One' }, { value: 2, label: 'Two' }] }
				p <code>emptyOption</code> <code class="data-type">Boolean</code> when <code class="default-value">undefined || true</code>, includes a blank value as the first option in the <code>&lt;select&gt;</code> field.
				pre: code.language-javascript { type: Types.Select, required: true, options: 'first, second', emptyOption: false }
				p <code>options</code> <code class="data-type">String</code> or <code class="data-type">Array</code> - the options for the select field
				p Option values can be provided as a comma-delimited list <code class="data-type">String</code> of values, in which the string is split into an <code class="data-type">Array</code>.
				p For an <code class="data-type">Array</code> of options, each option should be either a
				ul
					li <code class="data-type">String</code> representing the <code>value</code> of the option; the <code>label</code> is automatically generated
					li <code class="data-type">Object</code> with <code>value</code> and <code>label</code> <code class="data-type">String</code> properties
				p You can mix <code class="data-type">String</code> and <code class="data-type">Object</code> items in the <code>options</code> <code class="data-type">Array</code>:
				pre: code.language-javascript { type: Types.Select, options: ['first', 'second', { value: 'third', label: 'The third one' }] }
				p <code class="data-type">Object</code> options can have additional properties which are accessible when the current options data, or fields options are retrieved.
				pre: code.language-javascript
					| { type: Types.Select, options: [
					|     { value: 'first', label: 'The first option', custom: 'value' },
					|     { value: 'second', label: 'Second' }
					| ]}
				
				h5 Properties
				p <code>ops</code> <code class="data-type">Array</code> - the field <strong>options</strong> array
				p <code>values</code> <code class="data-type">Array</code> - all <code>option.value</code> properties
				p <code>labels</code> <code class="data-type">Object</code> - all <code>option.label</code> properties, keyed by <code>option.value</code>
				p <code>map</code> <code class="data-type">Object</code> - map of options, keyed by <code>option.value</code>
				
				h5 Schema
				p The value of the current option will be stored at <code>{path}</code>. In addition, these virtuals are provided:
				p <code>pathLabel</code> <code class="data-type">String</code> - the label of the currently selected <strong>option</strong>
				p <code>pathData</code> <code class="data-type">Object</code> - the currently selected <strong>option</strong>, including any custom properties
				p <code>pathOptions</code> <code class="data-type">Array</code> - the field <strong>options</strong> array
				p <code>pathOptionsMap</code> <code class="data-type">Object</code> - map of options, keyed by <code>option.value</code>
				
				h5 Underscore methods:
				p <code>pluck(property, default)</code> - returns <code>property</code> value of the currently selected <strong>option</strong>, or <code>default</code>. Useful in conjunction with custom properties for options.
				
				pre: code.language-javascript
					| MyList.add({ state: { type: Types.Select, options: 'draft, published, archived', default: 'draft' });
					| 
					| MyList.fields.state.values == 'draft,published,archived';
					| MyList.fields.state.labels == { draft: 'Draft', published: 'Published', archived: 'Archived' };
					| MyList.fields.state.ops == [
					|     { value: 'draft', label: 'Draft' },
					|     { value: 'published', label: 'Published' },
					|     { value: 'archived', label: 'Archived' }
					| ];
					| MyList.fields.state.map == {
					|     draft: { value: 'draft', label: 'Draft' },
					|     published: { value: 'published', label: 'Published' },
					|     archived: { value: 'archived', label: 'Archived' }
					| };
					| 
					| var item = new MyList.model();
					| item.state == 'draft';
					| item.stateLabel == 'Draft';
					| item.stateData == { value: 'draft', label: 'Draft' };
					| item.stateOptions == MyList.fields.state.ops;
					| item.stateOptionsMap == MyList.fields.state.map;
			
			
			a(name="fieldtypes-text")
			h3 <code>Text</code>
			h4 <code class="data-type">String</code> &mdash; Displayed as a text field in the Admin UI
			pre: code.language-javascript { type: Types.Text }
			
			
			a(name="fieldtypes-textarea")
			h3 <code>Textarea</code>
			h4 <code class="data-type">String</code> &mdash; Displayed as a textarea field in the Admin UI
			pre: code.language-javascript { type: Types.Textarea }
			.options
				
				h5 Options
				p <code>height</code> <code class="data-type">Number</code> - the height of the field (in pixels)
			


			a(name="fieldtypes-textarray")
			h3 <code>Textarray</code>
			h4 <code class="data-type">Array</code> &mdash; Displayed as a series of text fields in the Admin UI
			pre: code.language-javascript { type: Types.Textarray }
	


			a(name="fieldtypes-url")
			h3 <code>Url</code>
			h4 <code class="data-type">String</code> &mdash; Displayed as a text field in the Admin UI.
			pre: code.language-javascript { type: Types.Url }
			.options
				
				h5 Options
				p <code>format</code> <code class="data-type">Function</code> - process URL before its printed in the href/text of Admin UI cell. Defaults to <code class="default-value">removeProtocolPrefix</code>

				h5 Underscore methods:
				p <code>format()</code> - formats the stored value by stripping the leading protocol (if any)
				pre: code.language-javascript
					| item.url = "http://keystonejs.com";
					| item._.url.format(); // "keystonejs.com"
			
			h3 Storage	
			
			
			a(name="fieldtypes-azurefile")
			h3 <code>AzureFile</code>
			h4 <code class="data-type">Object</code> &mdash; Displayed as an file upload field in the Admin UI
			p Automatically manages files stored in <a href="http://www.windowsazure.com/" target="_blank">Windows Azure Storage</a>, including uploading and deleting.
			pre: code.language-javascript { type: Types.AzureFile }
			.options
				
				h5 Options
				p <code>filenameFormatter</code> <code class="data-type">Callback</code> - function with arguments current model and client file name to return the new filename to upload.
				pre: code.language-javascript { type: Types.AzureFile, filenameFormatter: function(item, filename) {
					|	return item._id + require('path').extname(filename);
					|} }
				p <code>containerFormatter</code> <code class="data-type">Callback</code> - function with arguments current model and client file name to return the new container name (container are a root folder in Azure Storage Account).
				pre: code.language-javascript { type: Types.AzureFile, containerFormatter: containerFormatter: function(item, filename) {
					|	return item.modelProperty;
					|} }
				
				h5 Schema
				p <code>filename</code> <code class="data-type">String</code>
				p <code>type</code> <code class="data-type">String</code>
				p <code>filesize</code> <code class="data-type">Number</code>
				p <code>url</code> <code class="data-type">String</code>
				p <code>etag</code> <code class="data-type">String</code>
				
				h5 Virtuals
				<code>exists</code> <code class="data-type">Boolean</code> - whether there is a stored file
				
				h5 Underscore methods
				p <code>uploadFile(file, update, callback)</code> - uploads a file to the Azure Storage Account, stores the details in the field and provides the file data to the callback.
				ul
					li <code>file</code> <code class="data-type">File</code> should be a file as provided by express when a file is uploaded, i.e. <code class="default-value">req.files.path</code>
					li <code>update</code> <code class="data-type">Boolean</code> whether to update the field with the details of the file after upload completes
					li <code>callback(err, fileData)</code> - is passed the object that will be stored in the field (see schema above)
						
			
			
			a(name="fieldtypes-cloudinaryimage")
			h3 <code>CloudinaryImage</code>
			h4 <code class="data-type">Object</code> &mdash; Displayed as an image upload field in the Admin UI
			p Automatically manages images stored in <a href="http://cloudinary.com" target="_blank">Cloudinary</a>, including uploading, resizing and deleting.
			p See the <a href="/docs/configuration#services-cloudinary">Cloudinary configuration documentation</a> for details on how to set up Cloudinary in KeystoneJS.
			pre: code.language-javascript { type: Types.CloudinaryImage }
			.options
				
				h5 Options
				p <code>publicID</code> <code class="data-type">String</code> name of the field to be used as the Cloudinary image <code class="data-type">public_id</code>.
				pre: code.language-javascript { type: Types.CloudinaryImage, publicID: 'slug' }
				p <code>folder</code> <code class="data-type">String</code> specifies a custom folder/prefix for the Cloudinary image <code class="data-type">public_id</code> when <code class="default-value">cloudinary folders</code> is set to <code class="default-value">true</code>.
				pre: code.language-javascript { type: Types.CloudinaryImage, folder: 'path/to/image' }
				p.note If you want Cloudinary to automatically create folders when the <code>cloudinary folders</code> option is set to <code class="default-value">true</code>, make sure you enable "Auto-create folders" in your Cloudinary account "Upload Settings".
				p <code>autoCleanup</code> <code class="data-type">Boolean</code> when <code class="default-value">true</code> changes Keystone's default behavior from <code class="default-value">remove</code> (which only removes the Cloudinary image from the database) to <code class="default-value">delete</code> (which removes the image from both the database and Cloudinary storage). Additionally, this option replaces an existing image (if one already exists) during upload.
				pre: code.language-javascript { type: Types.CloudinaryImage, autoCleanup : true }
				p <code>select</code> <code class="data-type">Boolean</code> when <code class="default-value">true</code> a select field is displayed with a list of images currently available in Cloudinary storage. Only images with IDs that begin with the <code>selectPrefix</code> will be displayed when the <code>selectPrefix</code> is specified. Otherwise, images with IDs that begin with the <code>folder</code> will be displayed. If neither <code>selectPrefix</code> nor <code>folder</code> are configured, then only images with IDs that begin with <code class="data-type">[{prefix}]/{list.path}/{field.path}/</code> will be displayed.
				pre: code.language-javascript { type: Types.CloudinaryImage, select : true }
				p <code>selectPrefix</code> <code class="data-type">String</code> specifies the the prefix of the images that will be available for selection when <code>select</code> option is <code class="default-value">true</code>.
				pre: code.language-javascript { type: Types.CloudinaryImage, select: true, selectPrefix: 'path/to/images' }

				h5 Schema
				p <code>public_id</code> <code class="data-type">String</code>
				p <code>version</code> <code class="data-type">Number</code>
				p <code>signature</code> <code class="data-type">String</code>
				p <code>format</code> <code class="data-type">String</code>
				p <code>resource_type</code> <code class="data-type">String</code>
				p <code>url</code> <code class="data-type">String</code>
				p <code>width</code> <code class="data-type">Number</code>
				p <code>height</code> <code class="data-type">Number</code>
				p <code>secure_url</code> <code class="data-type">String</code>
				
				h5 Virtuals
				<code>exists</code> <code class="data-type">Boolean</code> - whether there is a stored image
				
				h5 Special paths
				p <code>{path}_upload</code> - when a <code class="data-type">file</code> is provided to the <strong>updateHandler</strong>, it will be uploaded to cloudinary and the details will be stored in the field.
				//- TODO: Document {path}_action
				
				h5 Underscore methods
				p <code>src(options)</code> <code class="data-type">String</code> - returns the url of the image, accepts all options cloudinary supports
				p <code>tag(options)</code> <code class="data-type">String</code> - returns an <code class="default-value">&lt;img&gt;</code> tag
				p <code>scale(width, height, options)</code> <code class="data-type">String</code> - scales the image to fit the exact width and height, retaining aspect ratio
				p <code>fit(width, height, options)</code> <code class="data-type">String</code> - scales the image to fit within the specified width and height, retaining aspect ratio
				p <code>lfit(width, height, options)</code> <code class="data-type">String</code> - scales the image to fit within the specified width and height, retaining aspect ratio (without exceeding the original dimensions)
				p <code>limit(width, height, options)</code> <code class="data-type">String</code> - scales the image (down only) to fit within the specified width and height, retaining aspect ratio
				p <code>fill(width, height, options)</code> <code class="data-type">String</code> - scales the image to fill the specified width and height
				p <code>crop(width, height, options)</code> <code class="data-type">String</code> - crops the image to fill the specified width and height
				p <code>pad(width, height, options)</code> <code class="data-type">String</code> - pads the image to fill the specified width and height
				p <code>lpad(width, height, options)</code> <code class="data-type">String</code> - pads the image to fill the specified width and height (without exceeding the original dimensions)
				p <code>thumbnail(width, height, options)</code> <code class="data-type">String</code> - crops the image to fill the specified width and height
				p In all methods, <code class="default-value">options</code> is an optional <code class="data-type">Object</code>. See <a href="http://cloudinary.com/documentation/image_transformations" target="_blank">Cloudinary's Transformation Documentation</a> for more information on the supported options and transformations.
				//- TODO: Usage Examples
				
			p.note Remember that if you are uploading images to a <code>CloudinaryImage</code> field using an HTML form, you need to specify <code>enctype="multipart/form-data"</code> in your <code>form</code> tag.
			
			a(name="fieldtypes-cloudinaryimages")
			h3 <code>CloudinaryImages</code>
			h4 <code class="data-type">Array</code> &mdash; Displayed as a series of images, and an upload field in the Admin UI
			p Stores multiple images in a array as a nested <code class="data-type">Schema</code>, each of which expose the same methods as the <code class="data-type">cloudinaryimage</code> field.
			pre: code.language-javascript { type: Types.CloudinaryImages }
			.options
				
				h5 Options
				p <code>folder</code> <code class="data-type">String</code> specifies a custom folder/prefix for the Cloudinary image <code class="data-type">public_id</code> when <code class="default-value">cloudinary folders</code> is set to <code class="default-value">true</code>.
				pre: code.language-javascript { type: Types.CloudinaryImages, folder: 'path/to/image' }
				p.note If you want Cloudinary to automatically create folders when the <code>cloudinary folders</code> option is set to <code class="default-value">true</code>, make sure you enable "Auto-create folders" in your Cloudinary account "Upload Settings".
			
			a(name="fieldtypes-embedly")
			h3 <code>Embedly</code>
			h4 <code class="data-type">Object</code> &mdash; Displayed as read-only data in the Admin UI
			p Automatically retrieves data from the <a href="http://embed.ly" target="_blank">Embedly</a> API about the value of another field (specified with the <code>from</code> option).
			p It stores the retrieved data (which includes the provider, media type, full URL, HTML embed code, width, height, thumbnail picture and more).
			p The api call to retrieve the data is implemented as a pre-save hook, and is only triggered if the <strong>from path</strong> value has changed.
			p See the <a href="/docs/configuration#services-embedly">Embed.ly configuration documentation</a> for details on how to set up Embed.ly in KeystoneJS.
			pre: code.language-javascript { type: Types.Embedly, from: 'path' }
			.options
				
				h5 Options
				p <code>from</code> <code class="data-type">String</code> - the path of another field in the Schema that will be passed to the Embedly API. The other field must contain a <code class="data-type">String</code> value.
				p <code>options</code> <code class="data-type">Object</code> (optional) - passed as arguments to the embedly API along with the <code>from</code> field value
				p See <a href="http://embed.ly/docs/embed/api/endpoints/1/oembed" target="_blank">Embedly's oEmbed API documentation</a> for more information on options and returned data.
				
				h5 Schema
				p <code>exists</code> <code class="data-type">Boolean</code>
				p <code>type</code> <code class="data-type">String</code>
				p <code>title</code> <code class="data-type">String</code>
				p <code>url</code> <code class="data-type">String</code>
				p <code>width</code> <code class="data-type">Number</code>
				p <code>height</code> <code class="data-type">Number</code>
				p <code>version</code> <code class="data-type">String</code>
				p <code>description</code> <code class="data-type">String</code>
				p <code>html</code> <code class="data-type">String</code>
				p <code>authorName</code> <code class="data-type">String</code>
				p <code>authorUrl</code> <code class="data-type">String</code>
				p <code>providerName</code> <code class="data-type">String</code>
				p <code>providerUrl</code> <code class="data-type">String</code>
				p <code>thumbnailUrl</code> <code class="data-type">String</code>
				p <code>thumbnailWidth</code> <code class="data-type">Number</code>
				p <code>thumbnailHeight</code> <code class="data-type">Number</code>
			
			

			a(name="fieldtypes-localfile")
			h3 <code>LocalFile</code>
			.alert.alert-warning This field type is not compatible with PAAS Hosts like Heroku because it relies on the local file system
			h4 <code class="data-type">Object</code> &mdash; Displayed as a file upload field in the Admin UI
			p Stores files on the local file system.
			pre: code.language-javascript { type: Types.LocalFile }
			.options
				
				h5 Options
				p <code>dest</code> <code class="data-type">String</code> - required, the path to store uploaded file
				p <code>prefix</code> <code class="data-type">String</code> - the path prefix in browser, if it different with <code>dest</code>
				p <code>datePrefix</code> <code class="data-type">String</code> - if set, prefixes the file name with the current date in this format (see <a href="http://momentjs.com" target="_blank">moment.js</a> for format options)
				p <code>allowedTypes</code> <code class="data-type">Array</code> of <code class="data-type">String</code> - optional white-list of allowed mime types for uploaded file
				p <code>filename</code> <code class="data-type">Function</code> - function with two arguments: current model and file object to return the new filename to upload.
					pre: code.language-javascript.
						{
							type: Types.LocalFile,
							dest: '/data/files',
							prefix: '/files/',
							filename: function(item, file){
								return item.id + '.' + file.extension
							}
						}
				p <code>format</code> <code class="data-type">Function</code> - function with two arguments: current model and file object to return representation of this file in Admin UI.
					pre: code.language-javascript.
						{
							type: Types.LocalFile,
							dest: '/data/files',
							prefix: '/files/',
							format: function(item, file){
								return '&lt;img src="/files/'+file.filename+'" style="max-width: 300px"&gt;'
							}
						}
				
				h5 Schema
				p <code>filename</code> <code class="data-type">String</code>
				p <code>path</code> <code class="data-type">String</code>
				p <code>size</code> <code class="data-type">Number</code>
				p <code>filetype</code> <code class="data-type">String</code>
				
				h5 Virtuals
				<code>exists</code> <code class="data-type">Boolean</code> - whether there is a file path stored
			
				h5 Underscore methods
				p <code>uploadFile(file, update, callback)</code> - uploads a file to the local storage, stores the details in the field and provides the file data to the callback.
				ul
					li <code>file</code> <code class="data-type">File</code> should be a file as provided by express when a file is uploaded, i.e. <code class="default-value">req.files.path</code>
					li <code>update</code> <code class="data-type">Boolean</code> whether to update the field with the details of the file after upload completes
					li <code>callback(err, fileData)</code> - is passed the object that will be stored in the field (see schema above)
			
			//- TODO: document pre/post move hooks for LocalFile
			
			
			a(name="fieldtypes-s3file")
			h3 <code>S3 File</code>
			h4 <code class="data-type">Object</code> &mdash; Displayed as an file upload field in the Admin UI
			p Automatically manages files stored in <a href="http://aws.amazon.com/s3" target="_blank">Amazon S3</a>, including uploading and deleting.
			pre: code.language-javascript { type: Types.S3File }
			.options
				
				h5 Options
				p <code>s3path</code> <code class="data-type">String</code> - the path to store uploaded files under in the S3 bucket
				p <code>datePrefix</code> <code class="data-type">String</code> - if set, prefixes the file name with the current date in this format (see <a href="http://momentjs.com" target="_blank">moment.js</a> for format options)
				p <code>allowedTypes</code> <code class="data-type">Array</code> of <code class="data-type">String</code> - optional white-list of allowed mime types for uploaded files
				p <code>filename</code> <code class="data-type">Function</code> - function with arguments current model and client file name to return the new filename to upload.
					pre: code.language-javascript.
						{
							type: Types.S3File,
							filename: function(item, filename){
								// prefix file name with object id
								return item._id + '-' + filename;
							}
						}
				p <code>headers</code> <code class="data-type">Object</code> or <code class="data-type">Array</code> or <code class="data-type">Function</code> - headers to set on the S3 object
				p Headers can be provided as an <code class="data-type">Object</code>, in which the keys are used as header names and the values are used as header values.
					pre: code.language-javascript.
						{ 
							type: Types.S3File, 
							headers: { 
								'x-amz-meta-Cache-Control' : 'max-age=' + (60 * 15),
								'x-amz-meta-X-Custom-Header' : 'Object Option'
							} 
						}
				p When the option is provided as an <code class="data-type">Array</code> of headers, each header element in the array should be an <code class="data-type">Object</code> with <code>name</code> and <code>value</code> <code class="data-type">String</code> properties
					pre: code.language-javascript.
						{ 
							type: Types.S3File, 
							headers: [
								{ name: 'x-amz-meta-Cache-Control', value: 'max-age=' + (60 * 15) },
								{ name: 'x-amz-meta-X-Custom-Header', value: 'Array Option' }
							]
						}
				p When the option is provided as a <code class="data-type">Function</code>, the function will be called with arguments for the current model and client file; The function should return either an <code class="data-type">Array</code> of valid header objects or a simple <code class="data-type">Object</code>.
					pre: code.language-javascript.
						{ 
							type: Types.S3File, 
							headers: function (item, file) {
								var headers = [];
								headers.push({ name: 'x-amz-meta-Cache-Control', value: 'max-age=' + item.maxAge });
								headers.push({ name: 'x-amz-meta-X-Custom-Header', value: 'Computed Option (Array)' });
								return headers;
							}
						}
						// or 
						{ 
							type: Types.S3File, 
							headers: function (item, file){
								var headers = {};
								headers['x-amz-meta-Cache-Control'] = 'max-age=' + item.maxAge;
								headers['x-amz-meta-X-Custom-Header'] = 'Computed Option (Object)';
								return headers;
							}
						}
				p <code>format</code> <code class="data-type">Function</code> - function with two arguments: current model and file object to return representation of this file in Admin UI.
					pre: code.language-javascript.
						{
							type: Types.S3File,
							format: function(item, file){
								return '&lt;pre&gt;'+JSON.stringify(file, false, 2)+'&lt;/pre&gt;'+
											'&lt;img src="'+file.url+'" style="max-width: 300px"&gt;'
							}
						}
				
				h5 Schema
				p <code>filename</code> <code class="data-type">String</code>
				p <code>type</code> <code class="data-type">String</code>
				p <code>filesize</code> <code class="data-type">Number</code>
				p <code>url</code> <code class="data-type">String</code>
				
				h5 Virtuals
				<code>exists</code> <code class="data-type">Boolean</code> - whether there is a stored file
				
				h5 Special paths
				p <code>{path}_upload</code> - when a <code class="data-type">file</code> is provided to the <strong>updateHandler</strong>, it will be uploaded to s3 and the details will be stored in the field.
				//- TODO: Document {path}_action
			
				h5 Underscore methods
				p <code>uploadFile(file, update, callback)</code> - uploads a file to the s3 bucket, stores the details in the field and provides the file data to the callback.
				ul
					li <code>file</code> <code class="data-type">File</code> should be a file as provided by express when a file is uploaded, i.e. <code class="default-value">req.files.path</code>
					li <code>update</code> <code class="data-type">Boolean</code> whether to update the field with the details of the file after upload completes
					li <code>callback(err, fileData)</code> - is passed the object that will be stored in the field (see schema above)

			//- TODO: Usage Examples
			h2 More examples
			p See the <a href="/examples">Examples</a> page for projects that demonstrate real-world usage of the various list options and field types.
